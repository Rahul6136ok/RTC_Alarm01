
3001RTC_Date_Time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800327c  0800327c  0000427c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033cc  080033cc  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080033cc  080033cc  000043cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033d4  080033d4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d4  080033d4  000043d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033d8  080033d8  000043d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080033dc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          000001d4  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bee  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000199e  00000000  00000000  0000ec7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  00010618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000617  00000000  00000000  00010e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210df  00000000  00000000  00011437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a67b  00000000  00000000  00032516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8cd8  00000000  00000000  0003cb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105869  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024b0  00000000  00000000  001058ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00107d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003264 	.word	0x08003264

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003264 	.word	0x08003264

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler (void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000574:	f000 fb4e 	bl	8000c14 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000578:	f000 fc9a 	bl	8000eb0 <HAL_SYSTICK_IRQHandler>
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000584:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000588:	f000 fe3c 	bl	8001204 <HAL_GPIO_EXTI_IRQHandler>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <printmsg>:
  * @param  format: Format string as in printf.
  * @param  ...: Additional arguments providing the data to print.
  * @retval None
  */
void printmsg(char *format,...)
{
 8000590:	b40f      	push	{r0, r1, r2, r3}
 8000592:	b580      	push	{r7, lr}
 8000594:	b096      	sub	sp, #88	@ 0x58
 8000596:	af00      	add	r7, sp, #0
  char str[80];

  /*Extract the the argument list using VA apis */
  va_list args;
  va_start(args, format);
 8000598:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800059c:	607b      	str	r3, [r7, #4]
  vsprintf(str, format,args);
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 f9da 	bl	8002960 <vsiprintf>
  HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe0d 	bl	80001d0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f107 0108 	add.w	r1, r7, #8
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <printmsg+0x48>)
 80005c4:	f001 fdfa 	bl	80021bc <HAL_UART_Transmit>
  va_end(args);
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	@ 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d2:	b004      	add	sp, #16
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000078 	.word	0x20000078

080005dc <main>:

int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	HAL_Init();
 80005e0:	f000 fac6 	bl	8000b70 <HAL_Init>
	GPIO_Init();
 80005e4:	f000 f8f0 	bl	80007c8 <GPIO_Init>
	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80005e8:	2032      	movs	r0, #50	@ 0x32
 80005ea:	f000 f833 	bl	8000654 <SystemClock_Config_HSE>
	UART2_Init();
 80005ee:	f000 f937 	bl	8000860 <UART2_Init>
	RTC_Init();
 80005f2:	f000 f8c3 	bl	800077c <RTC_Init>

	printmsg("This is RTC calendar Test programe \r\n");
 80005f6:	4813      	ldr	r0, [pc, #76]	@ (8000644 <main+0x68>)
 80005f8:	f7ff ffca 	bl	8000590 <printmsg>

	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80005fc:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <main+0x6c>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	2b02      	cmp	r3, #2
 8000606:	d111      	bne.n	800062c <main+0x50>
	  {
	    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <main+0x6c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <main+0x6c>)
 800060e:	f043 0308 	orr.w	r3, r3, #8
 8000612:	6013      	str	r3, [r2, #0]
	    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <main+0x6c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <main+0x6c>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6013      	str	r3, [r2, #0]
	    printmsg("Woke up from STANDBY\r\n");
 8000620:	480a      	ldr	r0, [pc, #40]	@ (800064c <main+0x70>)
 8000622:	f7ff ffb5 	bl	8000590 <printmsg>
	    HAL_GPIO_EXTI_Callback(0);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f95e 	bl	80008e8 <HAL_GPIO_EXTI_Callback>
	  }

	  //RTC_CalendarConfig();
	  //Enable the wakeup pin 1 in pwr_csr register
	  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800062c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000630:	f000 fe00 	bl	8001234 <HAL_PWR_EnableWakeUpPin>

	  printmsg("Went to STANDBY mode\r\n");
 8000634:	4806      	ldr	r0, [pc, #24]	@ (8000650 <main+0x74>)
 8000636:	f7ff ffab 	bl	8000590 <printmsg>
	  HAL_PWR_EnterSTANDBYMode();
 800063a:	f000 fe0d 	bl	8001258 <HAL_PWR_EnterSTANDBYMode>

	  while(1);
 800063e:	bf00      	nop
 8000640:	e7fd      	b.n	800063e <main+0x62>
 8000642:	bf00      	nop
 8000644:	0800327c 	.word	0x0800327c
 8000648:	40007000 	.word	0x40007000
 800064c:	080032a4 	.word	0x080032a4
 8000650:	080032bc 	.word	0x080032bc

08000654 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	@ 0x58
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  RCC_OscInitTypeDef Osc_Init;
  RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 800065e:	2300      	movs	r3, #0
 8000660:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  Osc_Init.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	@ 0x38
  Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c

  switch(clock_freq) {
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	2b78      	cmp	r3, #120	@ 0x78
 800067c:	d034      	beq.n	80006e8 <SystemClock_Config_HSE+0x94>
 800067e:	2b78      	cmp	r3, #120	@ 0x78
 8000680:	dc76      	bgt.n	8000770 <SystemClock_Config_HSE+0x11c>
 8000682:	2b32      	cmp	r3, #50	@ 0x32
 8000684:	d002      	beq.n	800068c <SystemClock_Config_HSE+0x38>
 8000686:	2b54      	cmp	r3, #84	@ 0x54
 8000688:	d017      	beq.n	80006ba <SystemClock_Config_HSE+0x66>
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
    flash_latency = 3;
    break;

  default:
    return ;
 800068a:	e071      	b.n	8000770 <SystemClock_Config_HSE+0x11c>
    Osc_Init.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLN = 50;
 8000690:	2332      	movs	r3, #50	@ 0x32
 8000692:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLQ = 2;
 8000698:	2302      	movs	r3, #2
 800069a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
    flash_latency = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 80006b8:	e02e      	b.n	8000718 <SystemClock_Config_HSE+0xc4>
    Osc_Init.PLL.PLLM = 4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLN = 84;
 80006be:	2354      	movs	r3, #84	@ 0x54
 80006c0:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLQ = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80006ca:	230f      	movs	r3, #15
 80006cc:	60fb      	str	r3, [r7, #12]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	613b      	str	r3, [r7, #16]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006da:	61bb      	str	r3, [r7, #24]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
    flash_latency = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 80006e6:	e017      	b.n	8000718 <SystemClock_Config_HSE+0xc4>
    Osc_Init.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
    Osc_Init.PLL.PLLN = 120;
 80006ec:	2378      	movs	r3, #120	@ 0x78
 80006ee:	647b      	str	r3, [r7, #68]	@ 0x44
    Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	@ 0x48
    Osc_Init.PLL.PLLQ = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK  | RCC_CLOCKTYPE_SYSCLK |
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
    Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
    Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
    Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000704:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000708:	61bb      	str	r3, [r7, #24]
    Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070e:	61fb      	str	r3, [r7, #28]
    flash_latency = 3;
 8000710:	2303      	movs	r3, #3
 8000712:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    break;
 8000716:	bf00      	nop
  }

  if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fdb3 	bl	8001288 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config_HSE+0xd8>
  {
    Error_handler();
 8000728:	f000 f916 	bl	8000958 <Error_handler>
  }

  if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 800072c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4611      	mov	r1, r2
 8000736:	4618      	mov	r0, r3
 8000738:	f001 f81e 	bl	8001778 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config_HSE+0xf2>
  {
    Error_handler();
 8000742:	f000 f909 	bl	8000958 <Error_handler>
  }

  /*Configure the systick timer interrupt frequency (for every 1 ms) */
  uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 8000746:	f001 fa03 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 800074a:	6538      	str	r0, [r7, #80]	@ 0x50
  HAL_SYSTICK_Config(hclk_freq/1000);
 800074c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <SystemClock_Config_HSE+0x124>)
 8000750:	fba2 2303 	umull	r2, r3, r2, r3
 8000754:	099b      	lsrs	r3, r3, #6
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fb81 	bl	8000e5e <HAL_SYSTICK_Config>

  /**Configure the Systick
  */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800075c:	2004      	movs	r0, #4
 800075e:	f000 fb8b 	bl	8000e78 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	f04f 30ff 	mov.w	r0, #4294967295
 800076a:	f000 fb4e 	bl	8000e0a <HAL_NVIC_SetPriority>
 800076e:	e000      	b.n	8000772 <SystemClock_Config_HSE+0x11e>
    return ;
 8000770:	bf00      	nop
}
 8000772:	3758      	adds	r7, #88	@ 0x58
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	10624dd3 	.word	0x10624dd3

0800077c <RTC_Init>:
  * @param None
  * @retval None
  */

void RTC_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	hrtc.Instance =RTC;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <RTC_Init+0x44>)
 8000782:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <RTC_Init+0x48>)
 8000784:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <RTC_Init+0x44>)
 8000788:	2240      	movs	r2, #64	@ 0x40
 800078a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 0x7F;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <RTC_Init+0x44>)
 800078e:	227f      	movs	r2, #127	@ 0x7f
 8000790:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 0xFF;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <RTC_Init+0x44>)
 8000794:	22ff      	movs	r2, #255	@ 0xff
 8000796:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <RTC_Init+0x44>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <RTC_Init+0x44>)
 80007a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80007a4:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <RTC_Init+0x44>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]

	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <RTC_Init+0x44>)
 80007ae:	f001 fae5 	bl	8001d7c <HAL_RTC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <RTC_Init+0x40>
	{
		Error_handler();
 80007b8:	f000 f8ce 	bl	8000958 <Error_handler>
	}

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000c0 	.word	0x200000c0
 80007c4:	40002800 	.word	0x40002800

080007c8 <GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	@ 0x30
 80007cc:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <GPIO_Init+0x8c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000854 <GPIO_Init+0x8c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <GPIO_Init+0x8c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <GPIO_Init+0x8c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <GPIO_Init+0x8c>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <GPIO_Init+0x8c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]


  GPIO_InitTypeDef ledgpio , buttongpio;

  ledgpio.Pin = GPIO_PIN_5;
 8000806:	2320      	movs	r3, #32
 8000808:	61fb      	str	r3, [r7, #28]
  ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  ledgpio.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&ledgpio);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	480f      	ldr	r0, [pc, #60]	@ (8000858 <GPIO_Init+0x90>)
 800081a:	f000 fb57 	bl	8000ecc <HAL_GPIO_Init>

  buttongpio.Pin = GPIO_PIN_13;
 800081e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000822:	60bb      	str	r3, [r7, #8]
  buttongpio.Mode = GPIO_MODE_IT_FALLING;
 8000824:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000828:	60fb      	str	r3, [r7, #12]
  buttongpio.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC,&buttongpio);
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	4619      	mov	r1, r3
 8000834:	4809      	ldr	r0, [pc, #36]	@ (800085c <GPIO_Init+0x94>)
 8000836:	f000 fb49 	bl	8000ecc <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn,15,0);
 800083a:	2200      	movs	r2, #0
 800083c:	210f      	movs	r1, #15
 800083e:	2028      	movs	r0, #40	@ 0x28
 8000840:	f000 fae3 	bl	8000e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000844:	2028      	movs	r0, #40	@ 0x28
 8000846:	f000 fafc 	bl	8000e42 <HAL_NVIC_EnableIRQ>
}
 800084a:	bf00      	nop
 800084c:	3730      	adds	r7, #48	@ 0x30
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40020000 	.word	0x40020000
 800085c:	40020800 	.word	0x40020800

08000860 <UART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void UART2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <UART2_Init+0x44>)
 8000866:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <UART2_Init+0x48>)
 8000868:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate =115200;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <UART2_Init+0x44>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <UART2_Init+0x44>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <UART2_Init+0x44>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <UART2_Init+0x44>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <UART2_Init+0x44>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX;
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <UART2_Init+0x44>)
 800088c:	2208      	movs	r2, #8
 800088e:	615a      	str	r2, [r3, #20]

  if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <UART2_Init+0x44>)
 8000892:	f001 fc43 	bl	800211c <HAL_UART_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <UART2_Init+0x40>
  {
    //There is a problem
    Error_handler();
 800089c:	f000 f85c 	bl	8000958 <Error_handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000078 	.word	0x20000078
 80008a8:	40004400 	.word	0x40004400

080008ac <getDayofweek>:
  * @param  number: The day of the week as a number (1 for Monday, 2 for Tuesday, etc.).
  * @retval char*: The name of the corresponding day of the week.
  */

char* getDayofweek(uint8_t number)
{
 80008ac:	b4b0      	push	{r4, r5, r7}
 80008ae:	b08b      	sub	sp, #44	@ 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
  char *weekday[] = { "Monday", "TuesDay", "Wednesday","Thursday","Friday","Saturday","Sunday"};
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <getDayofweek+0x38>)
 80008b8:	f107 040c 	add.w	r4, r7, #12
 80008bc:	461d      	mov	r5, r3
 80008be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  return weekday[number-1];
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	3328      	adds	r3, #40	@ 0x28
 80008d2:	443b      	add	r3, r7
 80008d4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	372c      	adds	r7, #44	@ 0x2c
 80008dc:	46bd      	mov	sp, r7
 80008de:	bcb0      	pop	{r4, r5, r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	08003318 	.word	0x08003318

080008e8 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	b08b      	sub	sp, #44	@ 0x2c
 80008ec:	af02      	add	r7, sp, #8
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
	RTC_TimeTypeDef RTC_TimeRead;
	RTC_DateTypeDef RTC_DateRead;

	HAL_RTC_GetTime(&hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4814      	ldr	r0, [pc, #80]	@ (800094c <HAL_GPIO_EXTI_Callback+0x64>)
 80008fc:	f001 fac1 	bl	8001e82 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &RTC_DateRead, RTC_FORMAT_BIN);
 8000900:	f107 0308 	add.w	r3, r7, #8
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	4810      	ldr	r0, [pc, #64]	@ (800094c <HAL_GPIO_EXTI_Callback+0x64>)
 800090a:	f001 fb18 	bl	8001f3e <HAL_RTC_GetDate>

	//printmsg("Current time is : %02d:%02d:%2d\r\n",RTC_TimeRead.Hours,\RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);

	//printmsg("Current Date is : %02d-%2d-%2d <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\RTC_DateRead.Year,getDayofweek(RTC_DateRead));

	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 800090e:	7b3b      	ldrb	r3, [r7, #12]
 8000910:	4619      	mov	r1, r3
	     RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 8000912:	7b7b      	ldrb	r3, [r7, #13]
	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000914:	461a      	mov	r2, r3
	     RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 8000916:	7bbb      	ldrb	r3, [r7, #14]
	printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000918:	480d      	ldr	r0, [pc, #52]	@ (8000950 <HAL_GPIO_EXTI_Callback+0x68>)
 800091a:	f7ff fe39 	bl	8000590 <printmsg>
	printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\
 800091e:	7a7b      	ldrb	r3, [r7, #9]
 8000920:	461c      	mov	r4, r3
 8000922:	7abb      	ldrb	r3, [r7, #10]
 8000924:	461d      	mov	r5, r3
	     RTC_DateRead.Year,getDayofweek(RTC_DateRead.WeekDay));
 8000926:	7afb      	ldrb	r3, [r7, #11]
	printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\
 8000928:	461e      	mov	r6, r3
 800092a:	7a3b      	ldrb	r3, [r7, #8]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ffbd 	bl	80008ac <getDayofweek>
 8000932:	4603      	mov	r3, r0
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	4633      	mov	r3, r6
 8000938:	462a      	mov	r2, r5
 800093a:	4621      	mov	r1, r4
 800093c:	4805      	ldr	r0, [pc, #20]	@ (8000954 <HAL_GPIO_EXTI_Callback+0x6c>)
 800093e:	f7ff fe27 	bl	8000590 <printmsg>

}
 8000942:	bf00      	nop
 8000944:	3724      	adds	r7, #36	@ 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	bf00      	nop
 800094c:	200000c0 	.word	0x200000c0
 8000950:	08003334 	.word	0x08003334
 8000954:	08003358 	.word	0x08003358

08000958 <Error_handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  while(1);
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <Error_handler+0x4>

08000960 <HAL_MspInit>:
/*
 * @breif Initialize the msp
 * @retval None
 */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	//Here will do low level processor specific inits.
	  //1. Set up the priority grouping of the arm cortex mx processor
	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 fa45 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

	  //2. Enable the required system exceptions of the arm cortex mx processor
	  SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_MspInit+0x40>)
 800096c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800096e:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <HAL_MspInit+0x40>)
 8000970:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000974:	6253      	str	r3, [r2, #36]	@ 0x24

	  //3. configure the priority for the system exceptions
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	f06f 000b 	mvn.w	r0, #11
 800097e:	f000 fa44 	bl	8000e0a <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	f06f 000a 	mvn.w	r0, #10
 800098a:	f000 fa3e 	bl	8000e0a <HAL_NVIC_SetPriority>
	  HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	f06f 0009 	mvn.w	r0, #9
 8000996:	f000 fa38 	bl	8000e0a <HAL_NVIC_SetPriority>
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <HAL_UART_MspInit>:
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;
  //here we are going to do the low level inits. of the USART2 peripheral

  //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
  __HAL_RCC_USART2_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d0:	4a16      	ldr	r2, [pc, #88]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <HAL_UART_MspInit+0x88>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

  //2 . Do the pin muxing configurations
  gpio_uart.Pin = GPIO_PIN_2;
 80009e4:	2304      	movs	r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
  gpio_uart.Mode =GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
  gpio_uart.Pull = GPIO_PULLUP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
  gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80009f4:	2307      	movs	r3, #7
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a00:	f000 fa64 	bl	8000ecc <HAL_GPIO_Init>

  gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000a04:	2308      	movs	r3, #8
 8000a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4808      	ldr	r0, [pc, #32]	@ (8000a30 <HAL_UART_MspInit+0x8c>)
 8000a10:	f000 fa5c 	bl	8000ecc <HAL_GPIO_Init>
  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a14:	2026      	movs	r0, #38	@ 0x26
 8000a16:	f000 fa14 	bl	8000e42 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn,0,0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2026      	movs	r0, #38	@ 0x26
 8000a20:	f000 f9f3 	bl	8000e0a <HAL_NVIC_SetPriority>
}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	@ 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <HAL_RTC_MspInit>:
  *                the configuration information for RTC.
  * @retval None
  */

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b092      	sub	sp, #72	@ 0x48
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_PeriphCLKInitTypeDef RCC_RTCPeriClkInit;


	//1. Turn on the LSE
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30

	if(HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8000a48:	f107 0318 	add.w	r3, r7, #24
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fc1b 	bl	8001288 <HAL_RCC_OscConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_RTC_MspInit+0x28>
	{
		Error_handler();
 8000a58:	f7ff ff7e 	bl	8000958 <Error_handler>
	}

	//2. Select LSE as RTCCLK
	RCC_RTCPeriClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	60bb      	str	r3, [r7, #8]
	RCC_RTCPeriClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a64:	617b      	str	r3, [r7, #20]
	if(HAL_RCCEx_PeriphCLKConfig(&RCC_RTCPeriClkInit)!= HAL_OK)
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f8a4 	bl	8001bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_RTC_MspInit+0x46>
	{
		Error_handler();
 8000a76:	f7ff ff6f 	bl	8000958 <Error_handler>
	}
	//3. Enable the RTC Clock
	__HAL_RCC_RTC_ENABLE();
 8000a7a:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_RTC_MspInit+0x54>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	3748      	adds	r7, #72	@ 0x48
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	42470e3c 	.word	0x42470e3c

08000a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a94:	4a14      	ldr	r2, [pc, #80]	@ (8000ae8 <_sbrk+0x5c>)
 8000a96:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <_sbrk+0x60>)
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa0:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <_sbrk+0x64>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <_sbrk+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d207      	bcs.n	8000acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000abc:	f001 ff5a 	bl	8002974 <__errno>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	e009      	b.n	8000ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4a05      	ldr	r2, [pc, #20]	@ (8000af0 <_sbrk+0x64>)
 8000adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20020000 	.word	0x20020000
 8000aec:	00000400 	.word	0x00000400
 8000af0:	200000e0 	.word	0x200000e0
 8000af4:	20000230 	.word	0x20000230

08000af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b20:	f7ff ffea 	bl	8000af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f001 ff19 	bl	8002980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fd45 	bl	80005dc <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b60:	080033dc 	.word	0x080033dc
  ldr r2, =_sbss
 8000b64:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b68:	20000230 	.word	0x20000230

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f92b 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fedc 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f943 	bl	8000e5e <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 f90b 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	@ (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	200000e4 	.word	0x200000e4

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	200000e4 	.word	0x200000e4

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db0b      	blt.n	8000ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	f003 021f 	and.w	r2, r3, #31
 8000cd0:	4907      	ldr	r1, [pc, #28]	@ (8000cf0 <__NVIC_EnableIRQ+0x38>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	2001      	movs	r0, #1
 8000cda:	fa00 f202 	lsl.w	r2, r0, r2
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	@ (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	@ (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	@ 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	@ 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff29 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff3e 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff8e 	bl	8000d48 <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff31 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d106      	bne.n	8000e94 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e92:	e005      	b.n	8000ea0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e9a:	f023 0304 	bic.w	r3, r3, #4
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000eb4:	f000 f802 	bl	8000ebc <HAL_SYSTICK_Callback>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	@ 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e16b      	b.n	80011c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 815a 	bne.w	80011ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d017      	beq.n	8000fbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80b4 	beq.w	80011ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b60      	ldr	r3, [pc, #384]	@ (80011d8 <HAL_GPIO_Init+0x30c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	4a5f      	ldr	r2, [pc, #380]	@ (80011d8 <HAL_GPIO_Init+0x30c>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001060:	6453      	str	r3, [r2, #68]	@ 0x44
 8001062:	4b5d      	ldr	r3, [pc, #372]	@ (80011d8 <HAL_GPIO_Init+0x30c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a5b      	ldr	r2, [pc, #364]	@ (80011dc <HAL_GPIO_Init+0x310>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a52      	ldr	r2, [pc, #328]	@ (80011e0 <HAL_GPIO_Init+0x314>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d02b      	beq.n	80010f2 <HAL_GPIO_Init+0x226>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a51      	ldr	r2, [pc, #324]	@ (80011e4 <HAL_GPIO_Init+0x318>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x222>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a50      	ldr	r2, [pc, #320]	@ (80011e8 <HAL_GPIO_Init+0x31c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x21e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4f      	ldr	r2, [pc, #316]	@ (80011ec <HAL_GPIO_Init+0x320>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x21a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4e      	ldr	r2, [pc, #312]	@ (80011f0 <HAL_GPIO_Init+0x324>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x216>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4d      	ldr	r2, [pc, #308]	@ (80011f4 <HAL_GPIO_Init+0x328>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x212>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4c      	ldr	r2, [pc, #304]	@ (80011f8 <HAL_GPIO_Init+0x32c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x20e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4b      	ldr	r2, [pc, #300]	@ (80011fc <HAL_GPIO_Init+0x330>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x20a>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e00e      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010d6:	2308      	movs	r3, #8
 80010d8:	e00c      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010da:	2306      	movs	r3, #6
 80010dc:	e00a      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4935      	ldr	r1, [pc, #212]	@ (80011dc <HAL_GPIO_Init+0x310>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b3b      	ldr	r3, [pc, #236]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001136:	4a32      	ldr	r2, [pc, #200]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113c:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <HAL_GPIO_Init+0x334>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001160:	4a27      	ldr	r2, [pc, #156]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001166:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800118a:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <HAL_GPIO_Init+0x334>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_GPIO_Init+0x334>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b4:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <HAL_GPIO_Init+0x334>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f ae90 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40021800 	.word	0x40021800
 80011fc:	40021c00 	.word	0x40021c00
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121a:	4a05      	ldr	r2, [pc, #20]	@ (8001230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fb60 	bl	80008e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_PWR_EnableWakeUpPin+0x20>)
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	4904      	ldr	r1, [pc, #16]	@ (8001254 <HAL_PWR_EnableWakeUpPin+0x20>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40007000 	.word	0x40007000

08001258 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800125c:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a07      	ldr	r2, [pc, #28]	@ (8001280 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001262:	f043 0302 	orr.w	r3, r3, #2
 8001266:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001274:	bf30      	wfi
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40007000 	.word	0x40007000
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e267      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d075      	beq.n	8001392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012a6:	4b88      	ldr	r3, [pc, #544]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00c      	beq.n	80012cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b85      	ldr	r3, [pc, #532]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b82      	ldr	r3, [pc, #520]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ca:	d10b      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	4b7e      	ldr	r3, [pc, #504]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d05b      	beq.n	8001390 <HAL_RCC_OscConfig+0x108>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d157      	bne.n	8001390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e242      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x74>
 80012ee:	4b76      	ldr	r3, [pc, #472]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a75      	ldr	r2, [pc, #468]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x98>
 8001306:	4b70      	ldr	r3, [pc, #448]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6f      	ldr	r2, [pc, #444]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6d      	ldr	r3, [pc, #436]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6c      	ldr	r2, [pc, #432]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 8001320:	4b69      	ldr	r3, [pc, #420]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a68      	ldr	r2, [pc, #416]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b66      	ldr	r3, [pc, #408]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a65      	ldr	r2, [pc, #404]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fc7c 	bl	8000c3c <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fc78 	bl	8000c3c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e207      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b5b      	ldr	r3, [pc, #364]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xc0>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fc68 	bl	8000c3c <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fc64 	bl	8000c3c <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	@ 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1f3      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b51      	ldr	r3, [pc, #324]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800139e:	4b4a      	ldr	r3, [pc, #296]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b44      	ldr	r3, [pc, #272]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1c7      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4937      	ldr	r1, [pc, #220]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <HAL_RCC_OscConfig+0x244>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fc1d 	bl	8000c3c <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fc19 	bl	8000c3c <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1a8      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4925      	ldr	r1, [pc, #148]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <HAL_RCC_OscConfig+0x244>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fbfc 	bl	8000c3c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fbf8 	bl	8000c3c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e187      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d036      	beq.n	80014e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_RCC_OscConfig+0x248>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fbdc 	bl	8000c3c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fbd8 	bl	8000c3c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e167      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x200>
 80014a6:	e01b      	b.n	80014e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <HAL_RCC_OscConfig+0x248>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fbc5 	bl	8000c3c <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	e00e      	b.n	80014d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fbc1 	bl	8000c3c <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d907      	bls.n	80014d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e150      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470000 	.word	0x42470000
 80014d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b88      	ldr	r3, [pc, #544]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ea      	bne.n	80014b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8097 	beq.w	800161c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b81      	ldr	r3, [pc, #516]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b7d      	ldr	r3, [pc, #500]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	4a7c      	ldr	r2, [pc, #496]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	@ 0x40
 800150e:	4b7a      	ldr	r3, [pc, #488]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b77      	ldr	r3, [pc, #476]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b74      	ldr	r3, [pc, #464]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a73      	ldr	r2, [pc, #460]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff fb81 	bl	8000c3c <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153e:	f7ff fb7d 	bl	8000c3c <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e10c      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	4b6a      	ldr	r3, [pc, #424]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x2ea>
 8001564:	4b64      	ldr	r3, [pc, #400]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001568:	4a63      	ldr	r2, [pc, #396]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001570:	e01c      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x30c>
 800157a:	4b5f      	ldr	r3, [pc, #380]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157e:	4a5e      	ldr	r2, [pc, #376]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6713      	str	r3, [r2, #112]	@ 0x70
 8001586:	4b5c      	ldr	r3, [pc, #368]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158a:	4a5b      	ldr	r2, [pc, #364]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	@ 0x70
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001594:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001598:	4a57      	ldr	r2, [pc, #348]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a0:	4b55      	ldr	r3, [pc, #340]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a4:	4a54      	ldr	r2, [pc, #336]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 0304 	bic.w	r3, r3, #4
 80015aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d015      	beq.n	80015e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fb42 	bl	8000c3c <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff fb3e 	bl	8000c3c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0cb      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	4b49      	ldr	r3, [pc, #292]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ee      	beq.n	80015bc <HAL_RCC_OscConfig+0x334>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fb2c 	bl	8000c3c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fb28 	bl	8000c3c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0b5      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ee      	bne.n	80015e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	4a38      	ldr	r2, [pc, #224]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a1 	beq.w	8001768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d05c      	beq.n	80016ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d141      	bne.n	80016be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fafc 	bl	8000c3c <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff faf8 	bl	8000c3c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e087      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	3b01      	subs	r3, #1
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	491b      	ldr	r1, [pc, #108]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fad1 	bl	8000c3c <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff facd 	bl	8000c3c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e05c      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b0:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x416>
 80016bc:	e054      	b.n	8001768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff faba 	bl	8000c3c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fab6 	bl	8000c3c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e045      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x444>
 80016ea:	e03d      	b.n	8001768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e038      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40007000 	.word	0x40007000
 8001700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_RCC_OscConfig+0x4ec>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d028      	beq.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d121      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d11a      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800173a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173c:	4293      	cmp	r3, r2
 800173e:	d111      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	3b01      	subs	r3, #1
 800174e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0cc      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b68      	ldr	r3, [pc, #416]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d90c      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b65      	ldr	r3, [pc, #404]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a58      	ldr	r2, [pc, #352]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a52      	ldr	r2, [pc, #328]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d044      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d119      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b3f      	ldr	r3, [pc, #252]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3b      	ldr	r3, [pc, #236]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e067      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b37      	ldr	r3, [pc, #220]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4934      	ldr	r1, [pc, #208]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff f9e8 	bl	8000c3c <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff f9e4 	bl	8000c3c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2b      	ldr	r3, [pc, #172]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d20c      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f821 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001902:	4602      	mov	r2, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	490a      	ldr	r1, [pc, #40]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f948 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00
 8001934:	40023800 	.word	0x40023800
 8001938:	08003380 	.word	0x08003380
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001948:	b094      	sub	sp, #80	@ 0x50
 800194a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195c:	4b79      	ldr	r3, [pc, #484]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d00d      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x40>
 8001968:	2b08      	cmp	r3, #8
 800196a:	f200 80e1 	bhi.w	8001b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x34>
 8001972:	2b04      	cmp	r3, #4
 8001974:	d003      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x3a>
 8001976:	e0db      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b73      	ldr	r3, [pc, #460]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x204>)
 800197a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800197c:	e0db      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197e:	4b73      	ldr	r3, [pc, #460]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x208>)
 8001980:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001982:	e0d8      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001984:	4b6f      	ldr	r3, [pc, #444]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800198c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	2200      	movs	r2, #0
 80019a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019b6:	4622      	mov	r2, r4
 80019b8:	462b      	mov	r3, r5
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	0159      	lsls	r1, r3, #5
 80019c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c8:	0150      	lsls	r0, r2, #5
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4621      	mov	r1, r4
 80019d0:	1a51      	subs	r1, r2, r1
 80019d2:	6139      	str	r1, [r7, #16]
 80019d4:	4629      	mov	r1, r5
 80019d6:	eb63 0301 	sbc.w	r3, r3, r1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019e8:	4659      	mov	r1, fp
 80019ea:	018b      	lsls	r3, r1, #6
 80019ec:	4651      	mov	r1, sl
 80019ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f2:	4651      	mov	r1, sl
 80019f4:	018a      	lsls	r2, r1, #6
 80019f6:	4651      	mov	r1, sl
 80019f8:	ebb2 0801 	subs.w	r8, r2, r1
 80019fc:	4659      	mov	r1, fp
 80019fe:	eb63 0901 	sbc.w	r9, r3, r1
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a16:	4690      	mov	r8, r2
 8001a18:	4699      	mov	r9, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	eb18 0303 	adds.w	r3, r8, r3
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	462b      	mov	r3, r5
 8001a24:	eb49 0303 	adc.w	r3, r9, r3
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a36:	4629      	mov	r1, r5
 8001a38:	024b      	lsls	r3, r1, #9
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a40:	4621      	mov	r1, r4
 8001a42:	024a      	lsls	r2, r1, #9
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a54:	f7fe fc14 	bl	8000280 <__aeabi_uldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a60:	e058      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a62:	4b38      	ldr	r3, [pc, #224]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	464b      	mov	r3, r9
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	0159      	lsls	r1, r3, #5
 8001a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8e:	0150      	lsls	r0, r2, #5
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4641      	mov	r1, r8
 8001a96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	00eb      	lsls	r3, r5, #3
 8001ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aca:	00e2      	lsls	r2, r4, #3
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	18e3      	adds	r3, r4, r3
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	eb45 0303 	adc.w	r3, r5, r3
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aea:	4629      	mov	r1, r5
 8001aec:	028b      	lsls	r3, r1, #10
 8001aee:	4621      	mov	r1, r4
 8001af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af4:	4621      	mov	r1, r4
 8001af6:	028a      	lsls	r2, r1, #10
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001afe:	2200      	movs	r2, #0
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	61fa      	str	r2, [r7, #28]
 8001b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b08:	f7fe fbba 	bl	8000280 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b2e:	e002      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3750      	adds	r7, #80	@ 0x50
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	007a1200 	.word	0x007a1200

08001b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	@ (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08003390 	.word	0x08003390

08001b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b94:	f7ff ffdc 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	0b5b      	lsrs	r3, r3, #13
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	4903      	ldr	r1, [pc, #12]	@ (8001bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	08003390 	.word	0x08003390

08001bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d035      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001be0:	4b62      	ldr	r3, [pc, #392]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001be6:	f7ff f829 	bl	8000c3c <HAL_GetTick>
 8001bea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001bee:	f7ff f825 	bl	8000c3c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0b0      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c00:	4b5b      	ldr	r3, [pc, #364]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	019a      	lsls	r2, r3, #6
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	071b      	lsls	r3, r3, #28
 8001c18:	4955      	ldr	r1, [pc, #340]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c20:	4b52      	ldr	r3, [pc, #328]	@ (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c26:	f7ff f809 	bl	8000c3c <HAL_GetTick>
 8001c2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c2e:	f7ff f805 	bl	8000c3c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e090      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c40:	4b4b      	ldr	r3, [pc, #300]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8083 	beq.w	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b44      	ldr	r3, [pc, #272]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	4a43      	ldr	r2, [pc, #268]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6a:	4b41      	ldr	r3, [pc, #260]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c76:	4b3f      	ldr	r3, [pc, #252]	@ (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c82:	f7fe ffdb 	bl	8000c3c <HAL_GetTick>
 8001c86:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7fe ffd7 	bl	8000c3c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e062      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001c9c:	4b35      	ldr	r3, [pc, #212]	@ (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ca8:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cb0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d02f      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d028      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cd0:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd6:	4b28      	ldr	r3, [pc, #160]	@ (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001cdc:	4a24      	ldr	r2, [pc, #144]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ce2:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d114      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001cee:	f7fe ffa5 	bl	8000c3c <HAL_GetTick>
 8001cf2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe ffa1 	bl	8000c3c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e02a      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0c:	4b18      	ldr	r3, [pc, #96]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ee      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d24:	d10d      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001d26:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001d36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d3a:	490d      	ldr	r1, [pc, #52]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]
 8001d40:	e005      	b.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d48:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d4c:	6093      	str	r3, [r2, #8]
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d5a:	4905      	ldr	r1, [pc, #20]	@ (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	42470068 	.word	0x42470068
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000
 8001d78:	42470e40 	.word	0x42470e40

08001d7c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e073      	b.n	8001e7a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7f5b      	ldrb	r3, [r3, #29]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fe46 	bl	8000a34 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d055      	beq.n	8001e68 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	22ca      	movs	r2, #202	@ 0xca
 8001dc2:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2253      	movs	r2, #83	@ 0x53
 8001dca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f92b 	bl	8002028 <RTC_EnterInitMode>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d12c      	bne.n	8001e36 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001dea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001dee:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6899      	ldr	r1, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68d2      	ldr	r2, [r2, #12]
 8001e16:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6919      	ldr	r1, [r3, #16]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	041a      	lsls	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f932 	bl	8002096 <RTC_ExitInitMode>
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d110      	bne.n	8001e5e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e4a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	22ff      	movs	r2, #255	@ 0xff
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e66:	e001      	b.n	8001e6c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001eb4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001eb8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	0d9b      	lsrs	r3, r3, #22
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d11a      	bne.n	8001f34 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f8ec 	bl	80020e0 <RTC_Bcd2ToByte>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	785b      	ldrb	r3, [r3, #1]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f8e3 	bl	80020e0 <RTC_Bcd2ToByte>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	789b      	ldrb	r3, [r3, #2]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f8da 	bl	80020e0 <RTC_Bcd2ToByte>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001f58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001f5c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	0c1b      	lsrs	r3, r3, #16
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	0b5b      	lsrs	r3, r3, #13
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d11a      	bne.n	8001fd2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	78db      	ldrb	r3, [r3, #3]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f89d 	bl	80020e0 <RTC_Bcd2ToByte>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	785b      	ldrb	r3, [r3, #1]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f894 	bl	80020e0 <RTC_Bcd2ToByte>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	789b      	ldrb	r3, [r3, #2]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f88b 	bl	80020e0 <RTC_Bcd2ToByte>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <HAL_RTC_WaitForSynchro+0x48>)
 8001fee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff0:	f7fe fe24 	bl	8000c3c <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001ff6:	e009      	b.n	800200c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001ff8:	f7fe fe20 	bl	8000c3c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002006:	d901      	bls.n	800200c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e007      	b.n	800201c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ee      	beq.n	8001ff8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	00017f5f 	.word	0x00017f5f

08002028 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d122      	bne.n	800208c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002054:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002056:	f7fe fdf1 	bl	8000c3c <HAL_GetTick>
 800205a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800205c:	e00c      	b.n	8002078 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800205e:	f7fe fded 	bl	8000c3c <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800206c:	d904      	bls.n	8002078 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2204      	movs	r2, #4
 8002072:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <RTC_EnterInitMode+0x64>
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d1e8      	bne.n	800205e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020b0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10a      	bne.n	80020d6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff8b 	bl	8001fdc <HAL_RTC_WaitForSynchro>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2204      	movs	r2, #4
 80020d0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4413      	add	r3, r2
 800210e:	b2db      	uxtb	r3, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e042      	b.n	80021b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fc2e 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2224      	movs	r2, #36	@ 0x24
 800214c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800215e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f973 	bl	800244c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	@ 0x28
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d175      	bne.n	80022c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_UART_Transmit+0x2c>
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e06e      	b.n	80022ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2221      	movs	r2, #33	@ 0x21
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021fa:	f7fe fd1f 	bl	8000c3c <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	88fa      	ldrh	r2, [r7, #6]
 800220a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002214:	d108      	bne.n	8002228 <HAL_UART_Transmit+0x6c>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d104      	bne.n	8002228 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	e003      	b.n	8002230 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002230:	e02e      	b.n	8002290 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	2180      	movs	r1, #128	@ 0x80
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f848 	bl	80022d2 <UART_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e03a      	b.n	80022ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10b      	bne.n	8002272 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002268:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	3302      	adds	r3, #2
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	e007      	b.n	8002282 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3301      	adds	r3, #1
 8002280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002286:	b29b      	uxth	r3, r3
 8002288:	3b01      	subs	r3, #1
 800228a:	b29a      	uxth	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1cb      	bne.n	8002232 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2140      	movs	r1, #64	@ 0x40
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f814 	bl	80022d2 <UART_WaitOnFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e006      	b.n	80022ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e000      	b.n	80022ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80022c8:	2302      	movs	r3, #2
  }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	4613      	mov	r3, r2
 80022e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022e2:	e03b      	b.n	800235c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ea:	d037      	beq.n	800235c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ec:	f7fe fca6 	bl	8000c3c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	6a3a      	ldr	r2, [r7, #32]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d302      	bcc.n	8002302 <UART_WaitOnFlagUntilTimeout+0x30>
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e03a      	b.n	800237c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d023      	beq.n	800235c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b80      	cmp	r3, #128	@ 0x80
 8002318:	d020      	beq.n	800235c <UART_WaitOnFlagUntilTimeout+0x8a>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b40      	cmp	r3, #64	@ 0x40
 800231e:	d01d      	beq.n	800235c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b08      	cmp	r3, #8
 800232c:	d116      	bne.n	800235c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f81d 	bl	8002384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2208      	movs	r2, #8
 800234e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e00f      	b.n	800237c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4013      	ands	r3, r2
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	429a      	cmp	r2, r3
 8002378:	d0b4      	beq.n	80022e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002384:	b480      	push	{r7}
 8002386:	b095      	sub	sp, #84	@ 0x54
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	330c      	adds	r3, #12
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002396:	e853 3f00 	ldrex	r3, [r3]
 800239a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800239c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	330c      	adds	r3, #12
 80023aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80023ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023b4:	e841 2300 	strex	r3, r2, [r1]
 80023b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e5      	bne.n	800238c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3314      	adds	r3, #20
 80023c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	e853 3f00 	ldrex	r3, [r3]
 80023ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3314      	adds	r3, #20
 80023de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023e8:	e841 2300 	strex	r3, r2, [r1]
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1e5      	bne.n	80023c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d119      	bne.n	8002430 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	330c      	adds	r3, #12
 8002402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	e853 3f00 	ldrex	r3, [r3]
 800240a:	60bb      	str	r3, [r7, #8]
   return(result);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f023 0310 	bic.w	r3, r3, #16
 8002412:	647b      	str	r3, [r7, #68]	@ 0x44
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	330c      	adds	r3, #12
 800241a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800241c:	61ba      	str	r2, [r7, #24]
 800241e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002420:	6979      	ldr	r1, [r7, #20]
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	e841 2300 	strex	r3, r2, [r1]
 8002428:	613b      	str	r3, [r7, #16]
   return(result);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e5      	bne.n	80023fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800243e:	bf00      	nop
 8002440:	3754      	adds	r7, #84	@ 0x54
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800244c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002450:	b0c0      	sub	sp, #256	@ 0x100
 8002452:	af00      	add	r7, sp, #0
 8002454:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002468:	68d9      	ldr	r1, [r3, #12]
 800246a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	ea40 0301 	orr.w	r3, r0, r1
 8002474:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	431a      	orrs	r2, r3
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	431a      	orrs	r2, r3
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024a4:	f021 010c 	bic.w	r1, r1, #12
 80024a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024b2:	430b      	orrs	r3, r1
 80024b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80024c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c6:	6999      	ldr	r1, [r3, #24]
 80024c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	ea40 0301 	orr.w	r3, r0, r1
 80024d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4b8f      	ldr	r3, [pc, #572]	@ (8002718 <UART_SetConfig+0x2cc>)
 80024dc:	429a      	cmp	r2, r3
 80024de:	d005      	beq.n	80024ec <UART_SetConfig+0xa0>
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b8d      	ldr	r3, [pc, #564]	@ (800271c <UART_SetConfig+0x2d0>)
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d104      	bne.n	80024f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024ec:	f7ff fb50 	bl	8001b90 <HAL_RCC_GetPCLK2Freq>
 80024f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80024f4:	e003      	b.n	80024fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024f6:	f7ff fb37 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 80024fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002508:	f040 810c 	bne.w	8002724 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800250c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002510:	2200      	movs	r2, #0
 8002512:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002516:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800251a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800251e:	4622      	mov	r2, r4
 8002520:	462b      	mov	r3, r5
 8002522:	1891      	adds	r1, r2, r2
 8002524:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002526:	415b      	adcs	r3, r3
 8002528:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800252a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800252e:	4621      	mov	r1, r4
 8002530:	eb12 0801 	adds.w	r8, r2, r1
 8002534:	4629      	mov	r1, r5
 8002536:	eb43 0901 	adc.w	r9, r3, r1
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800254a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800254e:	4690      	mov	r8, r2
 8002550:	4699      	mov	r9, r3
 8002552:	4623      	mov	r3, r4
 8002554:	eb18 0303 	adds.w	r3, r8, r3
 8002558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800255c:	462b      	mov	r3, r5
 800255e:	eb49 0303 	adc.w	r3, r9, r3
 8002562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002572:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800257a:	460b      	mov	r3, r1
 800257c:	18db      	adds	r3, r3, r3
 800257e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002580:	4613      	mov	r3, r2
 8002582:	eb42 0303 	adc.w	r3, r2, r3
 8002586:	657b      	str	r3, [r7, #84]	@ 0x54
 8002588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800258c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002590:	f7fd fe76 	bl	8000280 <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4b61      	ldr	r3, [pc, #388]	@ (8002720 <UART_SetConfig+0x2d4>)
 800259a:	fba3 2302 	umull	r2, r3, r3, r2
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	011c      	lsls	r4, r3, #4
 80025a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025b4:	4642      	mov	r2, r8
 80025b6:	464b      	mov	r3, r9
 80025b8:	1891      	adds	r1, r2, r2
 80025ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025bc:	415b      	adcs	r3, r3
 80025be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025c4:	4641      	mov	r1, r8
 80025c6:	eb12 0a01 	adds.w	sl, r2, r1
 80025ca:	4649      	mov	r1, r9
 80025cc:	eb43 0b01 	adc.w	fp, r3, r1
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025e4:	4692      	mov	sl, r2
 80025e6:	469b      	mov	fp, r3
 80025e8:	4643      	mov	r3, r8
 80025ea:	eb1a 0303 	adds.w	r3, sl, r3
 80025ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025f2:	464b      	mov	r3, r9
 80025f4:	eb4b 0303 	adc.w	r3, fp, r3
 80025f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002608:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800260c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002610:	460b      	mov	r3, r1
 8002612:	18db      	adds	r3, r3, r3
 8002614:	643b      	str	r3, [r7, #64]	@ 0x40
 8002616:	4613      	mov	r3, r2
 8002618:	eb42 0303 	adc.w	r3, r2, r3
 800261c:	647b      	str	r3, [r7, #68]	@ 0x44
 800261e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002622:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002626:	f7fd fe2b 	bl	8000280 <__aeabi_uldivmod>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4611      	mov	r1, r2
 8002630:	4b3b      	ldr	r3, [pc, #236]	@ (8002720 <UART_SetConfig+0x2d4>)
 8002632:	fba3 2301 	umull	r2, r3, r3, r1
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2264      	movs	r2, #100	@ 0x64
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	1acb      	subs	r3, r1, r3
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002646:	4b36      	ldr	r3, [pc, #216]	@ (8002720 <UART_SetConfig+0x2d4>)
 8002648:	fba3 2302 	umull	r2, r3, r3, r2
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002654:	441c      	add	r4, r3
 8002656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002660:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002664:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002668:	4642      	mov	r2, r8
 800266a:	464b      	mov	r3, r9
 800266c:	1891      	adds	r1, r2, r2
 800266e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002670:	415b      	adcs	r3, r3
 8002672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002678:	4641      	mov	r1, r8
 800267a:	1851      	adds	r1, r2, r1
 800267c:	6339      	str	r1, [r7, #48]	@ 0x30
 800267e:	4649      	mov	r1, r9
 8002680:	414b      	adcs	r3, r1
 8002682:	637b      	str	r3, [r7, #52]	@ 0x34
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002690:	4659      	mov	r1, fp
 8002692:	00cb      	lsls	r3, r1, #3
 8002694:	4651      	mov	r1, sl
 8002696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800269a:	4651      	mov	r1, sl
 800269c:	00ca      	lsls	r2, r1, #3
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	4642      	mov	r2, r8
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026ac:	464b      	mov	r3, r9
 80026ae:	460a      	mov	r2, r1
 80026b0:	eb42 0303 	adc.w	r3, r2, r3
 80026b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80026c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80026cc:	460b      	mov	r3, r1
 80026ce:	18db      	adds	r3, r3, r3
 80026d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026d2:	4613      	mov	r3, r2
 80026d4:	eb42 0303 	adc.w	r3, r2, r3
 80026d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80026e2:	f7fd fdcd 	bl	8000280 <__aeabi_uldivmod>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002720 <UART_SetConfig+0x2d4>)
 80026ec:	fba3 1302 	umull	r1, r3, r3, r2
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	2164      	movs	r1, #100	@ 0x64
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	3332      	adds	r3, #50	@ 0x32
 80026fe:	4a08      	ldr	r2, [pc, #32]	@ (8002720 <UART_SetConfig+0x2d4>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	f003 0207 	and.w	r2, r3, #7
 800270a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4422      	add	r2, r4
 8002712:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002714:	e106      	b.n	8002924 <UART_SetConfig+0x4d8>
 8002716:	bf00      	nop
 8002718:	40011000 	.word	0x40011000
 800271c:	40011400 	.word	0x40011400
 8002720:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002728:	2200      	movs	r2, #0
 800272a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800272e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002732:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002736:	4642      	mov	r2, r8
 8002738:	464b      	mov	r3, r9
 800273a:	1891      	adds	r1, r2, r2
 800273c:	6239      	str	r1, [r7, #32]
 800273e:	415b      	adcs	r3, r3
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
 8002742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002746:	4641      	mov	r1, r8
 8002748:	1854      	adds	r4, r2, r1
 800274a:	4649      	mov	r1, r9
 800274c:	eb43 0501 	adc.w	r5, r3, r1
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	00eb      	lsls	r3, r5, #3
 800275a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800275e:	00e2      	lsls	r2, r4, #3
 8002760:	4614      	mov	r4, r2
 8002762:	461d      	mov	r5, r3
 8002764:	4643      	mov	r3, r8
 8002766:	18e3      	adds	r3, r4, r3
 8002768:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800276c:	464b      	mov	r3, r9
 800276e:	eb45 0303 	adc.w	r3, r5, r3
 8002772:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002782:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002792:	4629      	mov	r1, r5
 8002794:	008b      	lsls	r3, r1, #2
 8002796:	4621      	mov	r1, r4
 8002798:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800279c:	4621      	mov	r1, r4
 800279e:	008a      	lsls	r2, r1, #2
 80027a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027a4:	f7fd fd6c 	bl	8000280 <__aeabi_uldivmod>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4b60      	ldr	r3, [pc, #384]	@ (8002930 <UART_SetConfig+0x4e4>)
 80027ae:	fba3 2302 	umull	r2, r3, r3, r2
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	011c      	lsls	r4, r3, #4
 80027b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80027c8:	4642      	mov	r2, r8
 80027ca:	464b      	mov	r3, r9
 80027cc:	1891      	adds	r1, r2, r2
 80027ce:	61b9      	str	r1, [r7, #24]
 80027d0:	415b      	adcs	r3, r3
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d8:	4641      	mov	r1, r8
 80027da:	1851      	adds	r1, r2, r1
 80027dc:	6139      	str	r1, [r7, #16]
 80027de:	4649      	mov	r1, r9
 80027e0:	414b      	adcs	r3, r1
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027f0:	4659      	mov	r1, fp
 80027f2:	00cb      	lsls	r3, r1, #3
 80027f4:	4651      	mov	r1, sl
 80027f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027fa:	4651      	mov	r1, sl
 80027fc:	00ca      	lsls	r2, r1, #3
 80027fe:	4610      	mov	r0, r2
 8002800:	4619      	mov	r1, r3
 8002802:	4603      	mov	r3, r0
 8002804:	4642      	mov	r2, r8
 8002806:	189b      	adds	r3, r3, r2
 8002808:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800280c:	464b      	mov	r3, r9
 800280e:	460a      	mov	r2, r1
 8002810:	eb42 0303 	adc.w	r3, r2, r3
 8002814:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002822:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002830:	4649      	mov	r1, r9
 8002832:	008b      	lsls	r3, r1, #2
 8002834:	4641      	mov	r1, r8
 8002836:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800283a:	4641      	mov	r1, r8
 800283c:	008a      	lsls	r2, r1, #2
 800283e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002842:	f7fd fd1d 	bl	8000280 <__aeabi_uldivmod>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4611      	mov	r1, r2
 800284c:	4b38      	ldr	r3, [pc, #224]	@ (8002930 <UART_SetConfig+0x4e4>)
 800284e:	fba3 2301 	umull	r2, r3, r3, r1
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2264      	movs	r2, #100	@ 0x64
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	1acb      	subs	r3, r1, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	3332      	adds	r3, #50	@ 0x32
 8002860:	4a33      	ldr	r2, [pc, #204]	@ (8002930 <UART_SetConfig+0x4e4>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800286c:	441c      	add	r4, r3
 800286e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002872:	2200      	movs	r2, #0
 8002874:	673b      	str	r3, [r7, #112]	@ 0x70
 8002876:	677a      	str	r2, [r7, #116]	@ 0x74
 8002878:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800287c:	4642      	mov	r2, r8
 800287e:	464b      	mov	r3, r9
 8002880:	1891      	adds	r1, r2, r2
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	415b      	adcs	r3, r3
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800288c:	4641      	mov	r1, r8
 800288e:	1851      	adds	r1, r2, r1
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	4649      	mov	r1, r9
 8002894:	414b      	adcs	r3, r1
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028a4:	4659      	mov	r1, fp
 80028a6:	00cb      	lsls	r3, r1, #3
 80028a8:	4651      	mov	r1, sl
 80028aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ae:	4651      	mov	r1, sl
 80028b0:	00ca      	lsls	r2, r1, #3
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	4603      	mov	r3, r0
 80028b8:	4642      	mov	r2, r8
 80028ba:	189b      	adds	r3, r3, r2
 80028bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028be:	464b      	mov	r3, r9
 80028c0:	460a      	mov	r2, r1
 80028c2:	eb42 0303 	adc.w	r3, r2, r3
 80028c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80028d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80028e0:	4649      	mov	r1, r9
 80028e2:	008b      	lsls	r3, r1, #2
 80028e4:	4641      	mov	r1, r8
 80028e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ea:	4641      	mov	r1, r8
 80028ec:	008a      	lsls	r2, r1, #2
 80028ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80028f2:	f7fd fcc5 	bl	8000280 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <UART_SetConfig+0x4e4>)
 80028fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	2164      	movs	r1, #100	@ 0x64
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	3332      	adds	r3, #50	@ 0x32
 800290e:	4a08      	ldr	r2, [pc, #32]	@ (8002930 <UART_SetConfig+0x4e4>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	f003 020f 	and.w	r2, r3, #15
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4422      	add	r2, r4
 8002922:	609a      	str	r2, [r3, #8]
}
 8002924:	bf00      	nop
 8002926:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800292a:	46bd      	mov	sp, r7
 800292c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002930:	51eb851f 	.word	0x51eb851f

08002934 <_vsiprintf_r>:
 8002934:	b500      	push	{lr}
 8002936:	b09b      	sub	sp, #108	@ 0x6c
 8002938:	9100      	str	r1, [sp, #0]
 800293a:	9104      	str	r1, [sp, #16]
 800293c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002940:	9105      	str	r1, [sp, #20]
 8002942:	9102      	str	r1, [sp, #8]
 8002944:	4905      	ldr	r1, [pc, #20]	@ (800295c <_vsiprintf_r+0x28>)
 8002946:	9103      	str	r1, [sp, #12]
 8002948:	4669      	mov	r1, sp
 800294a:	f000 f993 	bl	8002c74 <_svfiprintf_r>
 800294e:	9b00      	ldr	r3, [sp, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	b01b      	add	sp, #108	@ 0x6c
 8002956:	f85d fb04 	ldr.w	pc, [sp], #4
 800295a:	bf00      	nop
 800295c:	ffff0208 	.word	0xffff0208

08002960 <vsiprintf>:
 8002960:	4613      	mov	r3, r2
 8002962:	460a      	mov	r2, r1
 8002964:	4601      	mov	r1, r0
 8002966:	4802      	ldr	r0, [pc, #8]	@ (8002970 <vsiprintf+0x10>)
 8002968:	6800      	ldr	r0, [r0, #0]
 800296a:	f7ff bfe3 	b.w	8002934 <_vsiprintf_r>
 800296e:	bf00      	nop
 8002970:	2000000c 	.word	0x2000000c

08002974 <__errno>:
 8002974:	4b01      	ldr	r3, [pc, #4]	@ (800297c <__errno+0x8>)
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	2000000c 	.word	0x2000000c

08002980 <__libc_init_array>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	4d0d      	ldr	r5, [pc, #52]	@ (80029b8 <__libc_init_array+0x38>)
 8002984:	4c0d      	ldr	r4, [pc, #52]	@ (80029bc <__libc_init_array+0x3c>)
 8002986:	1b64      	subs	r4, r4, r5
 8002988:	10a4      	asrs	r4, r4, #2
 800298a:	2600      	movs	r6, #0
 800298c:	42a6      	cmp	r6, r4
 800298e:	d109      	bne.n	80029a4 <__libc_init_array+0x24>
 8002990:	4d0b      	ldr	r5, [pc, #44]	@ (80029c0 <__libc_init_array+0x40>)
 8002992:	4c0c      	ldr	r4, [pc, #48]	@ (80029c4 <__libc_init_array+0x44>)
 8002994:	f000 fc66 	bl	8003264 <_init>
 8002998:	1b64      	subs	r4, r4, r5
 800299a:	10a4      	asrs	r4, r4, #2
 800299c:	2600      	movs	r6, #0
 800299e:	42a6      	cmp	r6, r4
 80029a0:	d105      	bne.n	80029ae <__libc_init_array+0x2e>
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
 80029a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a8:	4798      	blx	r3
 80029aa:	3601      	adds	r6, #1
 80029ac:	e7ee      	b.n	800298c <__libc_init_array+0xc>
 80029ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80029b2:	4798      	blx	r3
 80029b4:	3601      	adds	r6, #1
 80029b6:	e7f2      	b.n	800299e <__libc_init_array+0x1e>
 80029b8:	080033d4 	.word	0x080033d4
 80029bc:	080033d4 	.word	0x080033d4
 80029c0:	080033d4 	.word	0x080033d4
 80029c4:	080033d8 	.word	0x080033d8

080029c8 <__retarget_lock_acquire_recursive>:
 80029c8:	4770      	bx	lr

080029ca <__retarget_lock_release_recursive>:
 80029ca:	4770      	bx	lr

080029cc <_free_r>:
 80029cc:	b538      	push	{r3, r4, r5, lr}
 80029ce:	4605      	mov	r5, r0
 80029d0:	2900      	cmp	r1, #0
 80029d2:	d041      	beq.n	8002a58 <_free_r+0x8c>
 80029d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029d8:	1f0c      	subs	r4, r1, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bfb8      	it	lt
 80029de:	18e4      	addlt	r4, r4, r3
 80029e0:	f000 f8e0 	bl	8002ba4 <__malloc_lock>
 80029e4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <_free_r+0x90>)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	b933      	cbnz	r3, 80029f8 <_free_r+0x2c>
 80029ea:	6063      	str	r3, [r4, #4]
 80029ec:	6014      	str	r4, [r2, #0]
 80029ee:	4628      	mov	r0, r5
 80029f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029f4:	f000 b8dc 	b.w	8002bb0 <__malloc_unlock>
 80029f8:	42a3      	cmp	r3, r4
 80029fa:	d908      	bls.n	8002a0e <_free_r+0x42>
 80029fc:	6820      	ldr	r0, [r4, #0]
 80029fe:	1821      	adds	r1, r4, r0
 8002a00:	428b      	cmp	r3, r1
 8002a02:	bf01      	itttt	eq
 8002a04:	6819      	ldreq	r1, [r3, #0]
 8002a06:	685b      	ldreq	r3, [r3, #4]
 8002a08:	1809      	addeq	r1, r1, r0
 8002a0a:	6021      	streq	r1, [r4, #0]
 8002a0c:	e7ed      	b.n	80029ea <_free_r+0x1e>
 8002a0e:	461a      	mov	r2, r3
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	b10b      	cbz	r3, 8002a18 <_free_r+0x4c>
 8002a14:	42a3      	cmp	r3, r4
 8002a16:	d9fa      	bls.n	8002a0e <_free_r+0x42>
 8002a18:	6811      	ldr	r1, [r2, #0]
 8002a1a:	1850      	adds	r0, r2, r1
 8002a1c:	42a0      	cmp	r0, r4
 8002a1e:	d10b      	bne.n	8002a38 <_free_r+0x6c>
 8002a20:	6820      	ldr	r0, [r4, #0]
 8002a22:	4401      	add	r1, r0
 8002a24:	1850      	adds	r0, r2, r1
 8002a26:	4283      	cmp	r3, r0
 8002a28:	6011      	str	r1, [r2, #0]
 8002a2a:	d1e0      	bne.n	80029ee <_free_r+0x22>
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	6053      	str	r3, [r2, #4]
 8002a32:	4408      	add	r0, r1
 8002a34:	6010      	str	r0, [r2, #0]
 8002a36:	e7da      	b.n	80029ee <_free_r+0x22>
 8002a38:	d902      	bls.n	8002a40 <_free_r+0x74>
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	602b      	str	r3, [r5, #0]
 8002a3e:	e7d6      	b.n	80029ee <_free_r+0x22>
 8002a40:	6820      	ldr	r0, [r4, #0]
 8002a42:	1821      	adds	r1, r4, r0
 8002a44:	428b      	cmp	r3, r1
 8002a46:	bf04      	itt	eq
 8002a48:	6819      	ldreq	r1, [r3, #0]
 8002a4a:	685b      	ldreq	r3, [r3, #4]
 8002a4c:	6063      	str	r3, [r4, #4]
 8002a4e:	bf04      	itt	eq
 8002a50:	1809      	addeq	r1, r1, r0
 8002a52:	6021      	streq	r1, [r4, #0]
 8002a54:	6054      	str	r4, [r2, #4]
 8002a56:	e7ca      	b.n	80029ee <_free_r+0x22>
 8002a58:	bd38      	pop	{r3, r4, r5, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000022c 	.word	0x2000022c

08002a60 <sbrk_aligned>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	4e0f      	ldr	r6, [pc, #60]	@ (8002aa0 <sbrk_aligned+0x40>)
 8002a64:	460c      	mov	r4, r1
 8002a66:	6831      	ldr	r1, [r6, #0]
 8002a68:	4605      	mov	r5, r0
 8002a6a:	b911      	cbnz	r1, 8002a72 <sbrk_aligned+0x12>
 8002a6c:	f000 fba6 	bl	80031bc <_sbrk_r>
 8002a70:	6030      	str	r0, [r6, #0]
 8002a72:	4621      	mov	r1, r4
 8002a74:	4628      	mov	r0, r5
 8002a76:	f000 fba1 	bl	80031bc <_sbrk_r>
 8002a7a:	1c43      	adds	r3, r0, #1
 8002a7c:	d103      	bne.n	8002a86 <sbrk_aligned+0x26>
 8002a7e:	f04f 34ff 	mov.w	r4, #4294967295
 8002a82:	4620      	mov	r0, r4
 8002a84:	bd70      	pop	{r4, r5, r6, pc}
 8002a86:	1cc4      	adds	r4, r0, #3
 8002a88:	f024 0403 	bic.w	r4, r4, #3
 8002a8c:	42a0      	cmp	r0, r4
 8002a8e:	d0f8      	beq.n	8002a82 <sbrk_aligned+0x22>
 8002a90:	1a21      	subs	r1, r4, r0
 8002a92:	4628      	mov	r0, r5
 8002a94:	f000 fb92 	bl	80031bc <_sbrk_r>
 8002a98:	3001      	adds	r0, #1
 8002a9a:	d1f2      	bne.n	8002a82 <sbrk_aligned+0x22>
 8002a9c:	e7ef      	b.n	8002a7e <sbrk_aligned+0x1e>
 8002a9e:	bf00      	nop
 8002aa0:	20000228 	.word	0x20000228

08002aa4 <_malloc_r>:
 8002aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002aa8:	1ccd      	adds	r5, r1, #3
 8002aaa:	f025 0503 	bic.w	r5, r5, #3
 8002aae:	3508      	adds	r5, #8
 8002ab0:	2d0c      	cmp	r5, #12
 8002ab2:	bf38      	it	cc
 8002ab4:	250c      	movcc	r5, #12
 8002ab6:	2d00      	cmp	r5, #0
 8002ab8:	4606      	mov	r6, r0
 8002aba:	db01      	blt.n	8002ac0 <_malloc_r+0x1c>
 8002abc:	42a9      	cmp	r1, r5
 8002abe:	d904      	bls.n	8002aca <_malloc_r+0x26>
 8002ac0:	230c      	movs	r3, #12
 8002ac2:	6033      	str	r3, [r6, #0]
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ba0 <_malloc_r+0xfc>
 8002ace:	f000 f869 	bl	8002ba4 <__malloc_lock>
 8002ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ad6:	461c      	mov	r4, r3
 8002ad8:	bb44      	cbnz	r4, 8002b2c <_malloc_r+0x88>
 8002ada:	4629      	mov	r1, r5
 8002adc:	4630      	mov	r0, r6
 8002ade:	f7ff ffbf 	bl	8002a60 <sbrk_aligned>
 8002ae2:	1c43      	adds	r3, r0, #1
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	d158      	bne.n	8002b9a <_malloc_r+0xf6>
 8002ae8:	f8d8 4000 	ldr.w	r4, [r8]
 8002aec:	4627      	mov	r7, r4
 8002aee:	2f00      	cmp	r7, #0
 8002af0:	d143      	bne.n	8002b7a <_malloc_r+0xd6>
 8002af2:	2c00      	cmp	r4, #0
 8002af4:	d04b      	beq.n	8002b8e <_malloc_r+0xea>
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	4639      	mov	r1, r7
 8002afa:	4630      	mov	r0, r6
 8002afc:	eb04 0903 	add.w	r9, r4, r3
 8002b00:	f000 fb5c 	bl	80031bc <_sbrk_r>
 8002b04:	4581      	cmp	r9, r0
 8002b06:	d142      	bne.n	8002b8e <_malloc_r+0xea>
 8002b08:	6821      	ldr	r1, [r4, #0]
 8002b0a:	1a6d      	subs	r5, r5, r1
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f7ff ffa6 	bl	8002a60 <sbrk_aligned>
 8002b14:	3001      	adds	r0, #1
 8002b16:	d03a      	beq.n	8002b8e <_malloc_r+0xea>
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	442b      	add	r3, r5
 8002b1c:	6023      	str	r3, [r4, #0]
 8002b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	bb62      	cbnz	r2, 8002b80 <_malloc_r+0xdc>
 8002b26:	f8c8 7000 	str.w	r7, [r8]
 8002b2a:	e00f      	b.n	8002b4c <_malloc_r+0xa8>
 8002b2c:	6822      	ldr	r2, [r4, #0]
 8002b2e:	1b52      	subs	r2, r2, r5
 8002b30:	d420      	bmi.n	8002b74 <_malloc_r+0xd0>
 8002b32:	2a0b      	cmp	r2, #11
 8002b34:	d917      	bls.n	8002b66 <_malloc_r+0xc2>
 8002b36:	1961      	adds	r1, r4, r5
 8002b38:	42a3      	cmp	r3, r4
 8002b3a:	6025      	str	r5, [r4, #0]
 8002b3c:	bf18      	it	ne
 8002b3e:	6059      	strne	r1, [r3, #4]
 8002b40:	6863      	ldr	r3, [r4, #4]
 8002b42:	bf08      	it	eq
 8002b44:	f8c8 1000 	streq.w	r1, [r8]
 8002b48:	5162      	str	r2, [r4, r5]
 8002b4a:	604b      	str	r3, [r1, #4]
 8002b4c:	4630      	mov	r0, r6
 8002b4e:	f000 f82f 	bl	8002bb0 <__malloc_unlock>
 8002b52:	f104 000b 	add.w	r0, r4, #11
 8002b56:	1d23      	adds	r3, r4, #4
 8002b58:	f020 0007 	bic.w	r0, r0, #7
 8002b5c:	1ac2      	subs	r2, r0, r3
 8002b5e:	bf1c      	itt	ne
 8002b60:	1a1b      	subne	r3, r3, r0
 8002b62:	50a3      	strne	r3, [r4, r2]
 8002b64:	e7af      	b.n	8002ac6 <_malloc_r+0x22>
 8002b66:	6862      	ldr	r2, [r4, #4]
 8002b68:	42a3      	cmp	r3, r4
 8002b6a:	bf0c      	ite	eq
 8002b6c:	f8c8 2000 	streq.w	r2, [r8]
 8002b70:	605a      	strne	r2, [r3, #4]
 8002b72:	e7eb      	b.n	8002b4c <_malloc_r+0xa8>
 8002b74:	4623      	mov	r3, r4
 8002b76:	6864      	ldr	r4, [r4, #4]
 8002b78:	e7ae      	b.n	8002ad8 <_malloc_r+0x34>
 8002b7a:	463c      	mov	r4, r7
 8002b7c:	687f      	ldr	r7, [r7, #4]
 8002b7e:	e7b6      	b.n	8002aee <_malloc_r+0x4a>
 8002b80:	461a      	mov	r2, r3
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	42a3      	cmp	r3, r4
 8002b86:	d1fb      	bne.n	8002b80 <_malloc_r+0xdc>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	6053      	str	r3, [r2, #4]
 8002b8c:	e7de      	b.n	8002b4c <_malloc_r+0xa8>
 8002b8e:	230c      	movs	r3, #12
 8002b90:	6033      	str	r3, [r6, #0]
 8002b92:	4630      	mov	r0, r6
 8002b94:	f000 f80c 	bl	8002bb0 <__malloc_unlock>
 8002b98:	e794      	b.n	8002ac4 <_malloc_r+0x20>
 8002b9a:	6005      	str	r5, [r0, #0]
 8002b9c:	e7d6      	b.n	8002b4c <_malloc_r+0xa8>
 8002b9e:	bf00      	nop
 8002ba0:	2000022c 	.word	0x2000022c

08002ba4 <__malloc_lock>:
 8002ba4:	4801      	ldr	r0, [pc, #4]	@ (8002bac <__malloc_lock+0x8>)
 8002ba6:	f7ff bf0f 	b.w	80029c8 <__retarget_lock_acquire_recursive>
 8002baa:	bf00      	nop
 8002bac:	20000224 	.word	0x20000224

08002bb0 <__malloc_unlock>:
 8002bb0:	4801      	ldr	r0, [pc, #4]	@ (8002bb8 <__malloc_unlock+0x8>)
 8002bb2:	f7ff bf0a 	b.w	80029ca <__retarget_lock_release_recursive>
 8002bb6:	bf00      	nop
 8002bb8:	20000224 	.word	0x20000224

08002bbc <__ssputs_r>:
 8002bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc0:	688e      	ldr	r6, [r1, #8]
 8002bc2:	461f      	mov	r7, r3
 8002bc4:	42be      	cmp	r6, r7
 8002bc6:	680b      	ldr	r3, [r1, #0]
 8002bc8:	4682      	mov	sl, r0
 8002bca:	460c      	mov	r4, r1
 8002bcc:	4690      	mov	r8, r2
 8002bce:	d82d      	bhi.n	8002c2c <__ssputs_r+0x70>
 8002bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002bd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002bd8:	d026      	beq.n	8002c28 <__ssputs_r+0x6c>
 8002bda:	6965      	ldr	r5, [r4, #20]
 8002bdc:	6909      	ldr	r1, [r1, #16]
 8002bde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002be2:	eba3 0901 	sub.w	r9, r3, r1
 8002be6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bea:	1c7b      	adds	r3, r7, #1
 8002bec:	444b      	add	r3, r9
 8002bee:	106d      	asrs	r5, r5, #1
 8002bf0:	429d      	cmp	r5, r3
 8002bf2:	bf38      	it	cc
 8002bf4:	461d      	movcc	r5, r3
 8002bf6:	0553      	lsls	r3, r2, #21
 8002bf8:	d527      	bpl.n	8002c4a <__ssputs_r+0x8e>
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	f7ff ff52 	bl	8002aa4 <_malloc_r>
 8002c00:	4606      	mov	r6, r0
 8002c02:	b360      	cbz	r0, 8002c5e <__ssputs_r+0xa2>
 8002c04:	6921      	ldr	r1, [r4, #16]
 8002c06:	464a      	mov	r2, r9
 8002c08:	f000 fae8 	bl	80031dc <memcpy>
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c16:	81a3      	strh	r3, [r4, #12]
 8002c18:	6126      	str	r6, [r4, #16]
 8002c1a:	6165      	str	r5, [r4, #20]
 8002c1c:	444e      	add	r6, r9
 8002c1e:	eba5 0509 	sub.w	r5, r5, r9
 8002c22:	6026      	str	r6, [r4, #0]
 8002c24:	60a5      	str	r5, [r4, #8]
 8002c26:	463e      	mov	r6, r7
 8002c28:	42be      	cmp	r6, r7
 8002c2a:	d900      	bls.n	8002c2e <__ssputs_r+0x72>
 8002c2c:	463e      	mov	r6, r7
 8002c2e:	6820      	ldr	r0, [r4, #0]
 8002c30:	4632      	mov	r2, r6
 8002c32:	4641      	mov	r1, r8
 8002c34:	f000 faa8 	bl	8003188 <memmove>
 8002c38:	68a3      	ldr	r3, [r4, #8]
 8002c3a:	1b9b      	subs	r3, r3, r6
 8002c3c:	60a3      	str	r3, [r4, #8]
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	4433      	add	r3, r6
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	2000      	movs	r0, #0
 8002c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c4a:	462a      	mov	r2, r5
 8002c4c:	f000 fad4 	bl	80031f8 <_realloc_r>
 8002c50:	4606      	mov	r6, r0
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d1e0      	bne.n	8002c18 <__ssputs_r+0x5c>
 8002c56:	6921      	ldr	r1, [r4, #16]
 8002c58:	4650      	mov	r0, sl
 8002c5a:	f7ff feb7 	bl	80029cc <_free_r>
 8002c5e:	230c      	movs	r3, #12
 8002c60:	f8ca 3000 	str.w	r3, [sl]
 8002c64:	89a3      	ldrh	r3, [r4, #12]
 8002c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c6a:	81a3      	strh	r3, [r4, #12]
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	e7e9      	b.n	8002c46 <__ssputs_r+0x8a>
	...

08002c74 <_svfiprintf_r>:
 8002c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c78:	4698      	mov	r8, r3
 8002c7a:	898b      	ldrh	r3, [r1, #12]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	b09d      	sub	sp, #116	@ 0x74
 8002c80:	4607      	mov	r7, r0
 8002c82:	460d      	mov	r5, r1
 8002c84:	4614      	mov	r4, r2
 8002c86:	d510      	bpl.n	8002caa <_svfiprintf_r+0x36>
 8002c88:	690b      	ldr	r3, [r1, #16]
 8002c8a:	b973      	cbnz	r3, 8002caa <_svfiprintf_r+0x36>
 8002c8c:	2140      	movs	r1, #64	@ 0x40
 8002c8e:	f7ff ff09 	bl	8002aa4 <_malloc_r>
 8002c92:	6028      	str	r0, [r5, #0]
 8002c94:	6128      	str	r0, [r5, #16]
 8002c96:	b930      	cbnz	r0, 8002ca6 <_svfiprintf_r+0x32>
 8002c98:	230c      	movs	r3, #12
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	b01d      	add	sp, #116	@ 0x74
 8002ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ca6:	2340      	movs	r3, #64	@ 0x40
 8002ca8:	616b      	str	r3, [r5, #20]
 8002caa:	2300      	movs	r3, #0
 8002cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8002cae:	2320      	movs	r3, #32
 8002cb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002cb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cb8:	2330      	movs	r3, #48	@ 0x30
 8002cba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002e58 <_svfiprintf_r+0x1e4>
 8002cbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002cc2:	f04f 0901 	mov.w	r9, #1
 8002cc6:	4623      	mov	r3, r4
 8002cc8:	469a      	mov	sl, r3
 8002cca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cce:	b10a      	cbz	r2, 8002cd4 <_svfiprintf_r+0x60>
 8002cd0:	2a25      	cmp	r2, #37	@ 0x25
 8002cd2:	d1f9      	bne.n	8002cc8 <_svfiprintf_r+0x54>
 8002cd4:	ebba 0b04 	subs.w	fp, sl, r4
 8002cd8:	d00b      	beq.n	8002cf2 <_svfiprintf_r+0x7e>
 8002cda:	465b      	mov	r3, fp
 8002cdc:	4622      	mov	r2, r4
 8002cde:	4629      	mov	r1, r5
 8002ce0:	4638      	mov	r0, r7
 8002ce2:	f7ff ff6b 	bl	8002bbc <__ssputs_r>
 8002ce6:	3001      	adds	r0, #1
 8002ce8:	f000 80a7 	beq.w	8002e3a <_svfiprintf_r+0x1c6>
 8002cec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cee:	445a      	add	r2, fp
 8002cf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 809f 	beq.w	8002e3a <_svfiprintf_r+0x1c6>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002d02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d06:	f10a 0a01 	add.w	sl, sl, #1
 8002d0a:	9304      	str	r3, [sp, #16]
 8002d0c:	9307      	str	r3, [sp, #28]
 8002d0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d12:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d14:	4654      	mov	r4, sl
 8002d16:	2205      	movs	r2, #5
 8002d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d1c:	484e      	ldr	r0, [pc, #312]	@ (8002e58 <_svfiprintf_r+0x1e4>)
 8002d1e:	f7fd fa5f 	bl	80001e0 <memchr>
 8002d22:	9a04      	ldr	r2, [sp, #16]
 8002d24:	b9d8      	cbnz	r0, 8002d5e <_svfiprintf_r+0xea>
 8002d26:	06d0      	lsls	r0, r2, #27
 8002d28:	bf44      	itt	mi
 8002d2a:	2320      	movmi	r3, #32
 8002d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d30:	0711      	lsls	r1, r2, #28
 8002d32:	bf44      	itt	mi
 8002d34:	232b      	movmi	r3, #43	@ 0x2b
 8002d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8002d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d40:	d015      	beq.n	8002d6e <_svfiprintf_r+0xfa>
 8002d42:	9a07      	ldr	r2, [sp, #28]
 8002d44:	4654      	mov	r4, sl
 8002d46:	2000      	movs	r0, #0
 8002d48:	f04f 0c0a 	mov.w	ip, #10
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d52:	3b30      	subs	r3, #48	@ 0x30
 8002d54:	2b09      	cmp	r3, #9
 8002d56:	d94b      	bls.n	8002df0 <_svfiprintf_r+0x17c>
 8002d58:	b1b0      	cbz	r0, 8002d88 <_svfiprintf_r+0x114>
 8002d5a:	9207      	str	r2, [sp, #28]
 8002d5c:	e014      	b.n	8002d88 <_svfiprintf_r+0x114>
 8002d5e:	eba0 0308 	sub.w	r3, r0, r8
 8002d62:	fa09 f303 	lsl.w	r3, r9, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	9304      	str	r3, [sp, #16]
 8002d6a:	46a2      	mov	sl, r4
 8002d6c:	e7d2      	b.n	8002d14 <_svfiprintf_r+0xa0>
 8002d6e:	9b03      	ldr	r3, [sp, #12]
 8002d70:	1d19      	adds	r1, r3, #4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	9103      	str	r1, [sp, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bfbb      	ittet	lt
 8002d7a:	425b      	neglt	r3, r3
 8002d7c:	f042 0202 	orrlt.w	r2, r2, #2
 8002d80:	9307      	strge	r3, [sp, #28]
 8002d82:	9307      	strlt	r3, [sp, #28]
 8002d84:	bfb8      	it	lt
 8002d86:	9204      	strlt	r2, [sp, #16]
 8002d88:	7823      	ldrb	r3, [r4, #0]
 8002d8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d8c:	d10a      	bne.n	8002da4 <_svfiprintf_r+0x130>
 8002d8e:	7863      	ldrb	r3, [r4, #1]
 8002d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d92:	d132      	bne.n	8002dfa <_svfiprintf_r+0x186>
 8002d94:	9b03      	ldr	r3, [sp, #12]
 8002d96:	1d1a      	adds	r2, r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	9203      	str	r2, [sp, #12]
 8002d9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002da0:	3402      	adds	r4, #2
 8002da2:	9305      	str	r3, [sp, #20]
 8002da4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002e68 <_svfiprintf_r+0x1f4>
 8002da8:	7821      	ldrb	r1, [r4, #0]
 8002daa:	2203      	movs	r2, #3
 8002dac:	4650      	mov	r0, sl
 8002dae:	f7fd fa17 	bl	80001e0 <memchr>
 8002db2:	b138      	cbz	r0, 8002dc4 <_svfiprintf_r+0x150>
 8002db4:	9b04      	ldr	r3, [sp, #16]
 8002db6:	eba0 000a 	sub.w	r0, r0, sl
 8002dba:	2240      	movs	r2, #64	@ 0x40
 8002dbc:	4082      	lsls	r2, r0
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	3401      	adds	r4, #1
 8002dc2:	9304      	str	r3, [sp, #16]
 8002dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dc8:	4824      	ldr	r0, [pc, #144]	@ (8002e5c <_svfiprintf_r+0x1e8>)
 8002dca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002dce:	2206      	movs	r2, #6
 8002dd0:	f7fd fa06 	bl	80001e0 <memchr>
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d036      	beq.n	8002e46 <_svfiprintf_r+0x1d2>
 8002dd8:	4b21      	ldr	r3, [pc, #132]	@ (8002e60 <_svfiprintf_r+0x1ec>)
 8002dda:	bb1b      	cbnz	r3, 8002e24 <_svfiprintf_r+0x1b0>
 8002ddc:	9b03      	ldr	r3, [sp, #12]
 8002dde:	3307      	adds	r3, #7
 8002de0:	f023 0307 	bic.w	r3, r3, #7
 8002de4:	3308      	adds	r3, #8
 8002de6:	9303      	str	r3, [sp, #12]
 8002de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dea:	4433      	add	r3, r6
 8002dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dee:	e76a      	b.n	8002cc6 <_svfiprintf_r+0x52>
 8002df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002df4:	460c      	mov	r4, r1
 8002df6:	2001      	movs	r0, #1
 8002df8:	e7a8      	b.n	8002d4c <_svfiprintf_r+0xd8>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	3401      	adds	r4, #1
 8002dfe:	9305      	str	r3, [sp, #20]
 8002e00:	4619      	mov	r1, r3
 8002e02:	f04f 0c0a 	mov.w	ip, #10
 8002e06:	4620      	mov	r0, r4
 8002e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e0c:	3a30      	subs	r2, #48	@ 0x30
 8002e0e:	2a09      	cmp	r2, #9
 8002e10:	d903      	bls.n	8002e1a <_svfiprintf_r+0x1a6>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0c6      	beq.n	8002da4 <_svfiprintf_r+0x130>
 8002e16:	9105      	str	r1, [sp, #20]
 8002e18:	e7c4      	b.n	8002da4 <_svfiprintf_r+0x130>
 8002e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e1e:	4604      	mov	r4, r0
 8002e20:	2301      	movs	r3, #1
 8002e22:	e7f0      	b.n	8002e06 <_svfiprintf_r+0x192>
 8002e24:	ab03      	add	r3, sp, #12
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	462a      	mov	r2, r5
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e64 <_svfiprintf_r+0x1f0>)
 8002e2c:	a904      	add	r1, sp, #16
 8002e2e:	4638      	mov	r0, r7
 8002e30:	f3af 8000 	nop.w
 8002e34:	1c42      	adds	r2, r0, #1
 8002e36:	4606      	mov	r6, r0
 8002e38:	d1d6      	bne.n	8002de8 <_svfiprintf_r+0x174>
 8002e3a:	89ab      	ldrh	r3, [r5, #12]
 8002e3c:	065b      	lsls	r3, r3, #25
 8002e3e:	f53f af2d 	bmi.w	8002c9c <_svfiprintf_r+0x28>
 8002e42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e44:	e72c      	b.n	8002ca0 <_svfiprintf_r+0x2c>
 8002e46:	ab03      	add	r3, sp, #12
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	462a      	mov	r2, r5
 8002e4c:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <_svfiprintf_r+0x1f0>)
 8002e4e:	a904      	add	r1, sp, #16
 8002e50:	4638      	mov	r0, r7
 8002e52:	f000 f879 	bl	8002f48 <_printf_i>
 8002e56:	e7ed      	b.n	8002e34 <_svfiprintf_r+0x1c0>
 8002e58:	08003398 	.word	0x08003398
 8002e5c:	080033a2 	.word	0x080033a2
 8002e60:	00000000 	.word	0x00000000
 8002e64:	08002bbd 	.word	0x08002bbd
 8002e68:	0800339e 	.word	0x0800339e

08002e6c <_printf_common>:
 8002e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e70:	4616      	mov	r6, r2
 8002e72:	4698      	mov	r8, r3
 8002e74:	688a      	ldr	r2, [r1, #8]
 8002e76:	690b      	ldr	r3, [r1, #16]
 8002e78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bfb8      	it	lt
 8002e80:	4613      	movlt	r3, r2
 8002e82:	6033      	str	r3, [r6, #0]
 8002e84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e88:	4607      	mov	r7, r0
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	b10a      	cbz	r2, 8002e92 <_printf_common+0x26>
 8002e8e:	3301      	adds	r3, #1
 8002e90:	6033      	str	r3, [r6, #0]
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	0699      	lsls	r1, r3, #26
 8002e96:	bf42      	ittt	mi
 8002e98:	6833      	ldrmi	r3, [r6, #0]
 8002e9a:	3302      	addmi	r3, #2
 8002e9c:	6033      	strmi	r3, [r6, #0]
 8002e9e:	6825      	ldr	r5, [r4, #0]
 8002ea0:	f015 0506 	ands.w	r5, r5, #6
 8002ea4:	d106      	bne.n	8002eb4 <_printf_common+0x48>
 8002ea6:	f104 0a19 	add.w	sl, r4, #25
 8002eaa:	68e3      	ldr	r3, [r4, #12]
 8002eac:	6832      	ldr	r2, [r6, #0]
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	42ab      	cmp	r3, r5
 8002eb2:	dc26      	bgt.n	8002f02 <_printf_common+0x96>
 8002eb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002eb8:	6822      	ldr	r2, [r4, #0]
 8002eba:	3b00      	subs	r3, #0
 8002ebc:	bf18      	it	ne
 8002ebe:	2301      	movne	r3, #1
 8002ec0:	0692      	lsls	r2, r2, #26
 8002ec2:	d42b      	bmi.n	8002f1c <_printf_common+0xb0>
 8002ec4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ec8:	4641      	mov	r1, r8
 8002eca:	4638      	mov	r0, r7
 8002ecc:	47c8      	blx	r9
 8002ece:	3001      	adds	r0, #1
 8002ed0:	d01e      	beq.n	8002f10 <_printf_common+0xa4>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	6922      	ldr	r2, [r4, #16]
 8002ed6:	f003 0306 	and.w	r3, r3, #6
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf02      	ittt	eq
 8002ede:	68e5      	ldreq	r5, [r4, #12]
 8002ee0:	6833      	ldreq	r3, [r6, #0]
 8002ee2:	1aed      	subeq	r5, r5, r3
 8002ee4:	68a3      	ldr	r3, [r4, #8]
 8002ee6:	bf0c      	ite	eq
 8002ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002eec:	2500      	movne	r5, #0
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	bfc4      	itt	gt
 8002ef2:	1a9b      	subgt	r3, r3, r2
 8002ef4:	18ed      	addgt	r5, r5, r3
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	341a      	adds	r4, #26
 8002efa:	42b5      	cmp	r5, r6
 8002efc:	d11a      	bne.n	8002f34 <_printf_common+0xc8>
 8002efe:	2000      	movs	r0, #0
 8002f00:	e008      	b.n	8002f14 <_printf_common+0xa8>
 8002f02:	2301      	movs	r3, #1
 8002f04:	4652      	mov	r2, sl
 8002f06:	4641      	mov	r1, r8
 8002f08:	4638      	mov	r0, r7
 8002f0a:	47c8      	blx	r9
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	d103      	bne.n	8002f18 <_printf_common+0xac>
 8002f10:	f04f 30ff 	mov.w	r0, #4294967295
 8002f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f18:	3501      	adds	r5, #1
 8002f1a:	e7c6      	b.n	8002eaa <_printf_common+0x3e>
 8002f1c:	18e1      	adds	r1, r4, r3
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	2030      	movs	r0, #48	@ 0x30
 8002f22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f26:	4422      	add	r2, r4
 8002f28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f30:	3302      	adds	r3, #2
 8002f32:	e7c7      	b.n	8002ec4 <_printf_common+0x58>
 8002f34:	2301      	movs	r3, #1
 8002f36:	4622      	mov	r2, r4
 8002f38:	4641      	mov	r1, r8
 8002f3a:	4638      	mov	r0, r7
 8002f3c:	47c8      	blx	r9
 8002f3e:	3001      	adds	r0, #1
 8002f40:	d0e6      	beq.n	8002f10 <_printf_common+0xa4>
 8002f42:	3601      	adds	r6, #1
 8002f44:	e7d9      	b.n	8002efa <_printf_common+0x8e>
	...

08002f48 <_printf_i>:
 8002f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f4c:	7e0f      	ldrb	r7, [r1, #24]
 8002f4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f50:	2f78      	cmp	r7, #120	@ 0x78
 8002f52:	4691      	mov	r9, r2
 8002f54:	4680      	mov	r8, r0
 8002f56:	460c      	mov	r4, r1
 8002f58:	469a      	mov	sl, r3
 8002f5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f5e:	d807      	bhi.n	8002f70 <_printf_i+0x28>
 8002f60:	2f62      	cmp	r7, #98	@ 0x62
 8002f62:	d80a      	bhi.n	8002f7a <_printf_i+0x32>
 8002f64:	2f00      	cmp	r7, #0
 8002f66:	f000 80d2 	beq.w	800310e <_printf_i+0x1c6>
 8002f6a:	2f58      	cmp	r7, #88	@ 0x58
 8002f6c:	f000 80b9 	beq.w	80030e2 <_printf_i+0x19a>
 8002f70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f78:	e03a      	b.n	8002ff0 <_printf_i+0xa8>
 8002f7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f7e:	2b15      	cmp	r3, #21
 8002f80:	d8f6      	bhi.n	8002f70 <_printf_i+0x28>
 8002f82:	a101      	add	r1, pc, #4	@ (adr r1, 8002f88 <_printf_i+0x40>)
 8002f84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f88:	08002fe1 	.word	0x08002fe1
 8002f8c:	08002ff5 	.word	0x08002ff5
 8002f90:	08002f71 	.word	0x08002f71
 8002f94:	08002f71 	.word	0x08002f71
 8002f98:	08002f71 	.word	0x08002f71
 8002f9c:	08002f71 	.word	0x08002f71
 8002fa0:	08002ff5 	.word	0x08002ff5
 8002fa4:	08002f71 	.word	0x08002f71
 8002fa8:	08002f71 	.word	0x08002f71
 8002fac:	08002f71 	.word	0x08002f71
 8002fb0:	08002f71 	.word	0x08002f71
 8002fb4:	080030f5 	.word	0x080030f5
 8002fb8:	0800301f 	.word	0x0800301f
 8002fbc:	080030af 	.word	0x080030af
 8002fc0:	08002f71 	.word	0x08002f71
 8002fc4:	08002f71 	.word	0x08002f71
 8002fc8:	08003117 	.word	0x08003117
 8002fcc:	08002f71 	.word	0x08002f71
 8002fd0:	0800301f 	.word	0x0800301f
 8002fd4:	08002f71 	.word	0x08002f71
 8002fd8:	08002f71 	.word	0x08002f71
 8002fdc:	080030b7 	.word	0x080030b7
 8002fe0:	6833      	ldr	r3, [r6, #0]
 8002fe2:	1d1a      	adds	r2, r3, #4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6032      	str	r2, [r6, #0]
 8002fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e09d      	b.n	8003130 <_printf_i+0x1e8>
 8002ff4:	6833      	ldr	r3, [r6, #0]
 8002ff6:	6820      	ldr	r0, [r4, #0]
 8002ff8:	1d19      	adds	r1, r3, #4
 8002ffa:	6031      	str	r1, [r6, #0]
 8002ffc:	0606      	lsls	r6, r0, #24
 8002ffe:	d501      	bpl.n	8003004 <_printf_i+0xbc>
 8003000:	681d      	ldr	r5, [r3, #0]
 8003002:	e003      	b.n	800300c <_printf_i+0xc4>
 8003004:	0645      	lsls	r5, r0, #25
 8003006:	d5fb      	bpl.n	8003000 <_printf_i+0xb8>
 8003008:	f9b3 5000 	ldrsh.w	r5, [r3]
 800300c:	2d00      	cmp	r5, #0
 800300e:	da03      	bge.n	8003018 <_printf_i+0xd0>
 8003010:	232d      	movs	r3, #45	@ 0x2d
 8003012:	426d      	negs	r5, r5
 8003014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003018:	4859      	ldr	r0, [pc, #356]	@ (8003180 <_printf_i+0x238>)
 800301a:	230a      	movs	r3, #10
 800301c:	e011      	b.n	8003042 <_printf_i+0xfa>
 800301e:	6821      	ldr	r1, [r4, #0]
 8003020:	6833      	ldr	r3, [r6, #0]
 8003022:	0608      	lsls	r0, r1, #24
 8003024:	f853 5b04 	ldr.w	r5, [r3], #4
 8003028:	d402      	bmi.n	8003030 <_printf_i+0xe8>
 800302a:	0649      	lsls	r1, r1, #25
 800302c:	bf48      	it	mi
 800302e:	b2ad      	uxthmi	r5, r5
 8003030:	2f6f      	cmp	r7, #111	@ 0x6f
 8003032:	4853      	ldr	r0, [pc, #332]	@ (8003180 <_printf_i+0x238>)
 8003034:	6033      	str	r3, [r6, #0]
 8003036:	bf14      	ite	ne
 8003038:	230a      	movne	r3, #10
 800303a:	2308      	moveq	r3, #8
 800303c:	2100      	movs	r1, #0
 800303e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003042:	6866      	ldr	r6, [r4, #4]
 8003044:	60a6      	str	r6, [r4, #8]
 8003046:	2e00      	cmp	r6, #0
 8003048:	bfa2      	ittt	ge
 800304a:	6821      	ldrge	r1, [r4, #0]
 800304c:	f021 0104 	bicge.w	r1, r1, #4
 8003050:	6021      	strge	r1, [r4, #0]
 8003052:	b90d      	cbnz	r5, 8003058 <_printf_i+0x110>
 8003054:	2e00      	cmp	r6, #0
 8003056:	d04b      	beq.n	80030f0 <_printf_i+0x1a8>
 8003058:	4616      	mov	r6, r2
 800305a:	fbb5 f1f3 	udiv	r1, r5, r3
 800305e:	fb03 5711 	mls	r7, r3, r1, r5
 8003062:	5dc7      	ldrb	r7, [r0, r7]
 8003064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003068:	462f      	mov	r7, r5
 800306a:	42bb      	cmp	r3, r7
 800306c:	460d      	mov	r5, r1
 800306e:	d9f4      	bls.n	800305a <_printf_i+0x112>
 8003070:	2b08      	cmp	r3, #8
 8003072:	d10b      	bne.n	800308c <_printf_i+0x144>
 8003074:	6823      	ldr	r3, [r4, #0]
 8003076:	07df      	lsls	r7, r3, #31
 8003078:	d508      	bpl.n	800308c <_printf_i+0x144>
 800307a:	6923      	ldr	r3, [r4, #16]
 800307c:	6861      	ldr	r1, [r4, #4]
 800307e:	4299      	cmp	r1, r3
 8003080:	bfde      	ittt	le
 8003082:	2330      	movle	r3, #48	@ 0x30
 8003084:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003088:	f106 36ff 	addle.w	r6, r6, #4294967295
 800308c:	1b92      	subs	r2, r2, r6
 800308e:	6122      	str	r2, [r4, #16]
 8003090:	f8cd a000 	str.w	sl, [sp]
 8003094:	464b      	mov	r3, r9
 8003096:	aa03      	add	r2, sp, #12
 8003098:	4621      	mov	r1, r4
 800309a:	4640      	mov	r0, r8
 800309c:	f7ff fee6 	bl	8002e6c <_printf_common>
 80030a0:	3001      	adds	r0, #1
 80030a2:	d14a      	bne.n	800313a <_printf_i+0x1f2>
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	b004      	add	sp, #16
 80030aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	f043 0320 	orr.w	r3, r3, #32
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	4833      	ldr	r0, [pc, #204]	@ (8003184 <_printf_i+0x23c>)
 80030b8:	2778      	movs	r7, #120	@ 0x78
 80030ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	6831      	ldr	r1, [r6, #0]
 80030c2:	061f      	lsls	r7, r3, #24
 80030c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80030c8:	d402      	bmi.n	80030d0 <_printf_i+0x188>
 80030ca:	065f      	lsls	r7, r3, #25
 80030cc:	bf48      	it	mi
 80030ce:	b2ad      	uxthmi	r5, r5
 80030d0:	6031      	str	r1, [r6, #0]
 80030d2:	07d9      	lsls	r1, r3, #31
 80030d4:	bf44      	itt	mi
 80030d6:	f043 0320 	orrmi.w	r3, r3, #32
 80030da:	6023      	strmi	r3, [r4, #0]
 80030dc:	b11d      	cbz	r5, 80030e6 <_printf_i+0x19e>
 80030de:	2310      	movs	r3, #16
 80030e0:	e7ac      	b.n	800303c <_printf_i+0xf4>
 80030e2:	4827      	ldr	r0, [pc, #156]	@ (8003180 <_printf_i+0x238>)
 80030e4:	e7e9      	b.n	80030ba <_printf_i+0x172>
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	f023 0320 	bic.w	r3, r3, #32
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	e7f6      	b.n	80030de <_printf_i+0x196>
 80030f0:	4616      	mov	r6, r2
 80030f2:	e7bd      	b.n	8003070 <_printf_i+0x128>
 80030f4:	6833      	ldr	r3, [r6, #0]
 80030f6:	6825      	ldr	r5, [r4, #0]
 80030f8:	6961      	ldr	r1, [r4, #20]
 80030fa:	1d18      	adds	r0, r3, #4
 80030fc:	6030      	str	r0, [r6, #0]
 80030fe:	062e      	lsls	r6, r5, #24
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	d501      	bpl.n	8003108 <_printf_i+0x1c0>
 8003104:	6019      	str	r1, [r3, #0]
 8003106:	e002      	b.n	800310e <_printf_i+0x1c6>
 8003108:	0668      	lsls	r0, r5, #25
 800310a:	d5fb      	bpl.n	8003104 <_printf_i+0x1bc>
 800310c:	8019      	strh	r1, [r3, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	6123      	str	r3, [r4, #16]
 8003112:	4616      	mov	r6, r2
 8003114:	e7bc      	b.n	8003090 <_printf_i+0x148>
 8003116:	6833      	ldr	r3, [r6, #0]
 8003118:	1d1a      	adds	r2, r3, #4
 800311a:	6032      	str	r2, [r6, #0]
 800311c:	681e      	ldr	r6, [r3, #0]
 800311e:	6862      	ldr	r2, [r4, #4]
 8003120:	2100      	movs	r1, #0
 8003122:	4630      	mov	r0, r6
 8003124:	f7fd f85c 	bl	80001e0 <memchr>
 8003128:	b108      	cbz	r0, 800312e <_printf_i+0x1e6>
 800312a:	1b80      	subs	r0, r0, r6
 800312c:	6060      	str	r0, [r4, #4]
 800312e:	6863      	ldr	r3, [r4, #4]
 8003130:	6123      	str	r3, [r4, #16]
 8003132:	2300      	movs	r3, #0
 8003134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003138:	e7aa      	b.n	8003090 <_printf_i+0x148>
 800313a:	6923      	ldr	r3, [r4, #16]
 800313c:	4632      	mov	r2, r6
 800313e:	4649      	mov	r1, r9
 8003140:	4640      	mov	r0, r8
 8003142:	47d0      	blx	sl
 8003144:	3001      	adds	r0, #1
 8003146:	d0ad      	beq.n	80030a4 <_printf_i+0x15c>
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	079b      	lsls	r3, r3, #30
 800314c:	d413      	bmi.n	8003176 <_printf_i+0x22e>
 800314e:	68e0      	ldr	r0, [r4, #12]
 8003150:	9b03      	ldr	r3, [sp, #12]
 8003152:	4298      	cmp	r0, r3
 8003154:	bfb8      	it	lt
 8003156:	4618      	movlt	r0, r3
 8003158:	e7a6      	b.n	80030a8 <_printf_i+0x160>
 800315a:	2301      	movs	r3, #1
 800315c:	4632      	mov	r2, r6
 800315e:	4649      	mov	r1, r9
 8003160:	4640      	mov	r0, r8
 8003162:	47d0      	blx	sl
 8003164:	3001      	adds	r0, #1
 8003166:	d09d      	beq.n	80030a4 <_printf_i+0x15c>
 8003168:	3501      	adds	r5, #1
 800316a:	68e3      	ldr	r3, [r4, #12]
 800316c:	9903      	ldr	r1, [sp, #12]
 800316e:	1a5b      	subs	r3, r3, r1
 8003170:	42ab      	cmp	r3, r5
 8003172:	dcf2      	bgt.n	800315a <_printf_i+0x212>
 8003174:	e7eb      	b.n	800314e <_printf_i+0x206>
 8003176:	2500      	movs	r5, #0
 8003178:	f104 0619 	add.w	r6, r4, #25
 800317c:	e7f5      	b.n	800316a <_printf_i+0x222>
 800317e:	bf00      	nop
 8003180:	080033a9 	.word	0x080033a9
 8003184:	080033ba 	.word	0x080033ba

08003188 <memmove>:
 8003188:	4288      	cmp	r0, r1
 800318a:	b510      	push	{r4, lr}
 800318c:	eb01 0402 	add.w	r4, r1, r2
 8003190:	d902      	bls.n	8003198 <memmove+0x10>
 8003192:	4284      	cmp	r4, r0
 8003194:	4623      	mov	r3, r4
 8003196:	d807      	bhi.n	80031a8 <memmove+0x20>
 8003198:	1e43      	subs	r3, r0, #1
 800319a:	42a1      	cmp	r1, r4
 800319c:	d008      	beq.n	80031b0 <memmove+0x28>
 800319e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031a6:	e7f8      	b.n	800319a <memmove+0x12>
 80031a8:	4402      	add	r2, r0
 80031aa:	4601      	mov	r1, r0
 80031ac:	428a      	cmp	r2, r1
 80031ae:	d100      	bne.n	80031b2 <memmove+0x2a>
 80031b0:	bd10      	pop	{r4, pc}
 80031b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031ba:	e7f7      	b.n	80031ac <memmove+0x24>

080031bc <_sbrk_r>:
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4d06      	ldr	r5, [pc, #24]	@ (80031d8 <_sbrk_r+0x1c>)
 80031c0:	2300      	movs	r3, #0
 80031c2:	4604      	mov	r4, r0
 80031c4:	4608      	mov	r0, r1
 80031c6:	602b      	str	r3, [r5, #0]
 80031c8:	f7fd fc60 	bl	8000a8c <_sbrk>
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	d102      	bne.n	80031d6 <_sbrk_r+0x1a>
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	b103      	cbz	r3, 80031d6 <_sbrk_r+0x1a>
 80031d4:	6023      	str	r3, [r4, #0]
 80031d6:	bd38      	pop	{r3, r4, r5, pc}
 80031d8:	20000220 	.word	0x20000220

080031dc <memcpy>:
 80031dc:	440a      	add	r2, r1
 80031de:	4291      	cmp	r1, r2
 80031e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80031e4:	d100      	bne.n	80031e8 <memcpy+0xc>
 80031e6:	4770      	bx	lr
 80031e8:	b510      	push	{r4, lr}
 80031ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031f2:	4291      	cmp	r1, r2
 80031f4:	d1f9      	bne.n	80031ea <memcpy+0xe>
 80031f6:	bd10      	pop	{r4, pc}

080031f8 <_realloc_r>:
 80031f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031fc:	4680      	mov	r8, r0
 80031fe:	4615      	mov	r5, r2
 8003200:	460c      	mov	r4, r1
 8003202:	b921      	cbnz	r1, 800320e <_realloc_r+0x16>
 8003204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003208:	4611      	mov	r1, r2
 800320a:	f7ff bc4b 	b.w	8002aa4 <_malloc_r>
 800320e:	b92a      	cbnz	r2, 800321c <_realloc_r+0x24>
 8003210:	f7ff fbdc 	bl	80029cc <_free_r>
 8003214:	2400      	movs	r4, #0
 8003216:	4620      	mov	r0, r4
 8003218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800321c:	f000 f81a 	bl	8003254 <_malloc_usable_size_r>
 8003220:	4285      	cmp	r5, r0
 8003222:	4606      	mov	r6, r0
 8003224:	d802      	bhi.n	800322c <_realloc_r+0x34>
 8003226:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800322a:	d8f4      	bhi.n	8003216 <_realloc_r+0x1e>
 800322c:	4629      	mov	r1, r5
 800322e:	4640      	mov	r0, r8
 8003230:	f7ff fc38 	bl	8002aa4 <_malloc_r>
 8003234:	4607      	mov	r7, r0
 8003236:	2800      	cmp	r0, #0
 8003238:	d0ec      	beq.n	8003214 <_realloc_r+0x1c>
 800323a:	42b5      	cmp	r5, r6
 800323c:	462a      	mov	r2, r5
 800323e:	4621      	mov	r1, r4
 8003240:	bf28      	it	cs
 8003242:	4632      	movcs	r2, r6
 8003244:	f7ff ffca 	bl	80031dc <memcpy>
 8003248:	4621      	mov	r1, r4
 800324a:	4640      	mov	r0, r8
 800324c:	f7ff fbbe 	bl	80029cc <_free_r>
 8003250:	463c      	mov	r4, r7
 8003252:	e7e0      	b.n	8003216 <_realloc_r+0x1e>

08003254 <_malloc_usable_size_r>:
 8003254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003258:	1f18      	subs	r0, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	bfbc      	itt	lt
 800325e:	580b      	ldrlt	r3, [r1, r0]
 8003260:	18c0      	addlt	r0, r0, r3
 8003262:	4770      	bx	lr

08003264 <_init>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	bf00      	nop
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr

08003270 <_fini>:
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003272:	bf00      	nop
 8003274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003276:	bc08      	pop	{r3}
 8003278:	469e      	mov	lr, r3
 800327a:	4770      	bx	lr
